<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on bylr.info</title>
    <link>https://bylr.info/tags/python/</link>
    <description>Recent content in python on bylr.info</description>
    <image>
      <url>https://bylr.info/android-chrome-512x512.png</url>
      <link>https://bylr.info/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2022 Antoine Beyeler –</copyright>
    <lastBuildDate>Thu, 10 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bylr.info/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Batch processing SVGs with DoIt and vpype</title>
      <link>https://bylr.info/articles/2022/11/10/batch-processing-doit-vpype/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/11/10/batch-processing-doit-vpype/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pydoit.org&#34;&gt;&lt;em&gt;doit&lt;/em&gt;&lt;/a&gt; (a.k.a. PyDoIt) is a fantastic Python-based tool to automate repetitive workflows. It works particularly well alongside &lt;a href=&#34;https://vpype.readthedocs.io&#34;&gt;&lt;em&gt;vpype&lt;/em&gt;&lt;/a&gt; to address mundane plotting-related tasks. This article explains in details how to automate an SVG optimisation and conversion workflow.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://pydoit.org"><em>doit</em></a> (a.k.a. PyDoIt) is a fantastic Python-based tool to automate repetitive workflows. It works particularly well alongside <a href="https://vpype.readthedocs.io"><em>vpype</em></a> to address mundane plotting-related tasks. This article explains in details how to automate an SVG optimisation and conversion workflow.</p>
<p>Most plotter workflows involve one or more repetitive steps which, when executed manually, take time, are boring, and possibly error-prone. Here are some examples that come to mind:</p>
<ul>
<li>Optimizing SVGs using <em>vpype</em>&rsquo;s <code>linemerge reloop linesort linesimplify</code> commands.</li>
<li>Converting SVGs into a format your plotter understands (e.g. HPGL, or G-code using <a href="https://github.com/plottertools/vpype-gcode">vpype-gcode</a>).</li>
<li>Splitting multi-layer SVGs into individual layers (e.g. if this is a requirement of your plotter for multi-colour plots).</li>
<li>Making a PNG version of SVGs for archival purposes.</li>
<li>Running the <code>axicli</code> command to plot an SVG with an <a href="https://axidraw.com">Axidraw</a>.</li>
<li>Uploading optimised files to the computer/server/Raspberry Pi in control of your plotter.</li>
<li>Etc.</li>
</ul>
<p>Not only your workflow may include one or more of these steps, but you may need to apply it on a single SVG at a time, or on a bunch of them at once. Even better, you might want to apply your workflow only on SVGs which were updated or created since the last execution.</p>
<p>You can do exactly that with <em>doit</em>&mdash;let&rsquo;s see how.</p>
<h2 id="installing-doit">Installing <em>doit</em></h2>
<p>Although <a href="https://pydoit.org/install.html">its documentation</a> sadly doesn&rsquo;t mention it, <a href="https://pypa.github.io/pipx/">pipx</a> is the best way to install <em>doit</em> (as for <a href="https://vpype.readthedocs.io/en/latest/install.html"><em>vpype</em></a>):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ pipx install doit
</code></pre></div><p>You can check that the installation was successful by running this command:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit --version
0.36.0
lib @ /Users/&lt;username&gt;/.local/pipx/venvs/doit/lib/python3.10/site-packages/doit
</code></pre></div><h2 id="basics">Basics</h2>
<p>As a starting point, let&rsquo;s assume you have a bunch of SVGs which need optimising before plotting, stored in a <code>originals</code> subdirectory. Save the optimisation commands in a <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#command-files">VPY file</a> named <code>optimize.vpy</code>, with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">linemerge reloop linesort linesimplify
</code></pre></div><p>Then, create a subdirectory named <code>processed</code>, which will contain the optimised SVGs:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir processed 
</code></pre></div><p>Here is how your file hierarchy should look like:</p>
<pre tabindex="0"><code>.
├── optimize.vpy
├── originals/
│   ├── dots.svg
│   ├── halftone.svg
│   └── hline.svg
└── processed/
</code></pre><p>Our goal is to have <em>doit</em> automate the optimisation of the source SVGs in <code>originals</code>, and store the result in <code>processed</code>.</p>
<p><em>doit</em> operates by loading a description of the task(s) it must execute, typically in a file named <code>dodo.py</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. As the name suggests, the content of this file is Python code.</p>
<p>Create a <code>dodo.py</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>                                                            <span style="color:#998;font-style:italic"># (1)</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent                                       <span style="color:#998;font-style:italic"># (2)</span>
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))                         <span style="color:#998;font-style:italic"># (3)</span>
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>                                                <span style="color:#998;font-style:italic"># (4)</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():                                                      <span style="color:#998;font-style:italic"># (5)</span>
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>                                                   <span style="color:#998;font-style:italic"># (6)</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:                                                <span style="color:#998;font-style:italic"># (7)</span>
        optimized <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)  <span style="color:#998;font-style:italic"># (8)</span>
        <span style="color:#000;font-weight:bold">yield</span> {                                                           <span style="color:#998;font-style:italic"># (9)</span>
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,                                          <span style="color:#998;font-style:italic"># (10)</span>
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>   <span style="color:#998;font-style:italic"># (11)</span>
            ],
        }
</code></pre></div><p>Let&rsquo;s examine this code line-by-line.</p>
<ol>
<li>The <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib</code></a> built-in module is great at file wrangling. Check <a href="https://realpython.com/python-pathlib/">this Real Python article</a> for a gentle yet thorough introduction.</li>
<li>Here we use it to find our project directory, which is the parent of the present file, whose path is stored in the <code>__file__</code> variable by the Python interpreter.</li>
<li>We list all the SVGs contained in the <code>originals</code> subdirectory, and store them in the <code>SOURCES</code> variable. Note that <code>glob()</code> returns a generator, which must be converted to a <code>list</code> if <code>SOURCES</code> is to be iterated multiple times.</li>
<li>We keep the path to the <code>optimize.vpy</code> file in the <code>VPY</code> variable.</li>
<li>Python functions with name starting with <code>task_</code> are interpreted by <em>doit</em> as <a href="https://pydoit.org/tasks.html">tasks</a>. Here we have just one. Let&rsquo;s call it &ldquo;optimize&rdquo;, thus the <code>task_optimize()</code> function name.</li>
<li>The function&rsquo;s <a href="https://peps.python.org/pep-0257/">docstring</a> is used by <em>doit</em> as help string for the task, so it is useful to include one.</li>
<li>Task functions must return one or more Python dictionaries describing the task. In our case, we want to create one <a href="https://pydoit.org/tasks.html#sub-tasks">sub-tasks</a> per source SVG file.</li>
<li>For each source SVG, we derive the path for the corresponding optimised SVG. The optimised SVG are located in the <code>processed</code> subdirectory and have a <code>_optimized.svg</code> suffix to their name.</li>
<li>Using <a href="https://docs.python.org/3/reference/expressions.html#yieldexpr"><code>yield</code></a> keyword (instead of <code>return</code>) makes our function a <a href="https://docs.python.org/3/glossary.html#term-generator">generator</a> (gentle introduction available <a href="https://realpython.com/introduction-to-python-generators/">here</a>). This is a convenient way to return (er&hellip; yield) multiple objects, which is supported by <em>doit</em>. Here, we yield one dictionary per sub-task.</li>
<li>Sub-tasks must be individually named so that they can be distinguished. Here we derive the sub-task name from the source SVG filename. For example, the sub-task corresponding to <code>my_file.svg</code> will be named <code>my_file</code>, and can be referred to with <em>doit</em> as <code>optimize:my_file</code>.</li>
<li>Last but not least, the <code>&quot;actions&quot;</code> entry of the sub-task dictionary lists the actions to be performed by the task. <em>doit</em> interprets strings as shell commands, so we build a <em>vpype</em> pipeline to optimise the source SVG using our VPY and saving the result in the desired location. For example, for <code>my_file.svg</code>, the action will be <code>vpype read originals/my_file.svg -I optimize.vpy write processed/my_file_optimized.svg</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ol>
<p>Let&rsquo;s take a step back to properly understand what&rsquo;s going on.</p>
<p>The function <code>task_optimize()</code> produces a task <em>description</em>&mdash;it does not actually <em>run</em> the task. When we run <em>doit</em> (using the <code>doit</code> command), it loads the <code>dodo.py</code> file, notices that it contains a task function, and calls it to learn about that task. It&rsquo;s only <em>then</em> that it can decide which action(s) to actually execute, based on the task description. In this case, the actions are the <em>vpype</em> pipelines stored in the <code>&quot;actions&quot;</code> entries.</p>
<p>Although this <code>dodo.py</code> file is not overly complicated, it can still feel like quite some work compared to, you know, just calling <em>vpype</em> manually. I certainly felt so when first using <em>doit</em>. So let&rsquo;s see what we gained by going through this effort.</p>
<p>First and foremost, we now have a potent batch processing system. We can optimise all of our source SVGs by telling <em>doit</em> to execute the <code>optimize</code> task:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit optimize
.  optimize:dots
.  optimize:halftone
.  optimize:hline
</code></pre></div><p>Here is the result after running this command:</p>
<pre tabindex="0"><code>.
├── dodo.py
├── optimize.vpy
├── originals/
│   ├── dots.svg
│   ├── halftone.svg
│   └── hline.svg
└── processed/
    ├── dots_optimized.svg
    ├── halftone_optimized.svg
    └── hline_optimized.svg
</code></pre><p><em>doit</em> indeed created properly-named, optimised versions of the source SVGs in the <code>processed</code> directory! 🎉</p>
<p>Since we only have just one task defined, we don&rsquo;t even need to specify its name:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit
.  optimize:dots
.  optimize:halftone
.  optimize:hline
</code></pre></div><p>You can also specify a specific sub-task to execute:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit optimize:halftone
.  optimize:halftone
</code></pre></div><p>Pretty neat already&mdash;but there is a lot more to gain with a little more effort!</p>
<h2 id="handling-targets-and-dependencies">Handling targets and dependencies</h2>
<p>Playing with the commands above, you may notice that each call of the <code>optimize</code> task triggers the processing of the corresponding SVGs&mdash;even if said SVGs were already processed before. The reason for this is that <em>doit</em> doesn&rsquo;t yet know what the task inputs and outputs are, so it cannot check whether that output exists or is outdated. So, to be on the safe side, it <em>always</em> executes <em>all specified tasks</em> every time.</p>
<p>By letting <em>doit</em> know about tasks' inputs and outputs, <em>doit</em> can be much smarter about what it actually needs to do.</p>
<p>In <em>doit</em> parlance, the file(s) a task uses as input are called <em>dependencies</em> (<code>&quot;file_dep&quot;</code> entry). Likewise, the file(s) created as output are called <em>targets</em> (<code>&quot;targets&quot;</code> entry). By specifying what these are in the <code>dodo.py</code> file, <em>doit</em> can decide whether the target of a given task needs to be generated or not, saving a lot of time when repeating the workflow.</p>
<p>Update the <code>dodo.py</code> file as follows:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        optimized <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;targets&#34;</span>: [optimized],         <span style="color:#998;font-style:italic"># (1)</span>
            <span style="color:#d14">&#34;file_dep&#34;</span>: [source, VPY],      <span style="color:#998;font-style:italic"># (2)</span>
        }
</code></pre></div><ol>
<li>The <code>&quot;targets&quot;</code> entry is a list of all the files generated by the sub-task. In our case, there is only one, whose path is stored in the <code>optimized</code> variable.</li>
<li>The <code>&quot;file_dep&quot;</code> entry is a list of all the files the sub-task depends on. In our case, both the source SVG and the VPY file are involved to create an optimised SVG, so we list them both.</li>
</ol>
<p>It would be easy to forget the VPY file in the <code>&quot;file_dep&quot;</code> entry. That would be a mistake. All the optimised SVGs should be regenerated when the VPY file is modified. For <em>doit</em> to realise this, we must list the VPY file as a dependency.</p>
<p>With the modification above, <em>doit</em> now knows when to run optimisation sub-tasks and when they can be skipped.</p>
<p>Let&rsquo;s experiment with a clean slate by deleting all the processed files:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ rm processed/*.svg
</code></pre></div><p><em>doit</em> must now execute all sub-tasks:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit
.  optimize:dots
.  optimize:halftone
.  optimize:hline
</code></pre></div><p>Notice the dot (<code>.</code>) prefixing each line and how the execution is relatively slow.</p>
<p>Now, this is what happens if we run <em>doit</em> again:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit
-- optimize:dots
-- optimize:halftone
-- optimize:hline
</code></pre></div><p>Execution time is now much faster and each line is now prefixed with <code>--</code>, indicating that <em>doit</em> skipped the corresponding sub-task.</p>
<p>Let&rsquo;s see what happens if one of the source file is modified.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ <span style="color:#0086b3">echo</span> <span style="color:#d14">&#34; &#34;</span> &gt;&gt; originals/halftone.svg
$ doit
-- optimize:dots
.  optimize:halftone
-- optimize:hline
</code></pre></div><p>We first append a single space to the <code>halftone.svg</code> (which is harmless on a valid SVG) to simulate a change<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. As expected, <em>doit</em> rebuilds the of <code>halftone.svg</code> without running the other tasks! 🎉</p>
<p>We now have a setup able to automatically process large batches of files and be smart about if/when any sub-task must be repeated. You have a thousand SVGs to process? It&rsquo;s coffee time while the CPUs churn through them<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. You add just one to the list? Instant results, thanks to <em>doit</em>!</p>
<h2 id="cleaning-up">Cleaning up</h2>
<p>The files created by the <code>optimize</code> task can be considered &ldquo;temporary&rdquo;. When missing, they are automatically recreated by <em>doit</em>, and are overwritten by a new version when the input file (or the VPY file) change. In that sense, they matter much less than the source SVGs and the <code>dodo.py</code> file, which collectively form the &ldquo;recipe&rdquo; to build the optimised SVGs<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<p>The ability to delete these files may occasionally be useful. For example, to force a complete rebuild of the optimised files, to make an archive with only the true source files, or simply to free some disk space.</p>
<p><em>doit</em> provides this feature with a single modification to the <code>dodo.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        optimized <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;targets&#34;</span>: [optimized],
            <span style="color:#d14">&#34;file_dep&#34;</span>: [source, VPY],
            <span style="color:#d14">&#34;clean&#34;</span>: <span style="color:#000;font-weight:bold">True</span>,                  <span style="color:#998;font-style:italic"># (1)</span>
        }
</code></pre></div><ol>
<li>Tell <em>doit</em> that target files should be deleted when running <code>doit clean</code>.</li>
</ol>
<p>Let&rsquo;s see this in action:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit clean
optimize:hline - removing file <span style="color:#d14">&#39;.../processed/hline_optimized.svg&#39;</span>
optimize:halftone - removing file <span style="color:#d14">&#39;.../processed/halftone_optimized.svg&#39;</span>
optimize:dots - removing file <span style="color:#d14">&#39;.../processed/dots_optimized.svg&#39;</span>
</code></pre></div><p>Works as expected! 🎉</p>
<h2 id="multiple-tasks">Multiple tasks</h2>
<p>Although <em>doit</em> already shines dealing with a single task, it reveals its true power when multiple tasks are involved&mdash;even more so when they depend on each other.</p>
<p>For the illustration purposes, let&rsquo;s imagine that we need to convert the optimised SVGs to HPGL, so that we may plot them on a shiny &lsquo;83 <a href="http://www.hpmuseum.net/display_item.php?hw=74">HP 7475a</a>. We&rsquo;ll add a second task for this<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.</p>
<p>First, let&rsquo;s start by creating a new <code>hpgl</code> subdirectory to store the HPGL files:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir hpgl
</code></pre></div><p>Since we cleaned the optimised SVGs in the previous steps, this how your project directory should look:</p>
<pre tabindex="0"><code>.
├── dodo.py
├── hpgl/
├── optimize.vpy
├── originals/
│   ├── dots.svg
│   ├── halftone.svg
│   └── hline.svg
└── processed/
</code></pre><p>Now, update the <code>dodo.py</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">optimized_path</span>(source: pathlib<span style="color:#000;font-weight:bold">.</span>Path):                              <span style="color:#998;font-style:italic"># (1)</span>
    <span style="color:#d14">&#34;&#34;&#34;derive optimized path from source path&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">return</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">hpgl_path</span>(source: pathlib<span style="color:#000;font-weight:bold">.</span>Path):                                   <span style="color:#998;font-style:italic"># (2)</span>
    <span style="color:#d14">&#34;&#34;&#34;derive HPGL path from source path&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">return</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;hpgl&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;.hpgl&#34;</span>)

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        optimized <span style="color:#000;font-weight:bold">=</span> optimized_path(source)                             <span style="color:#998;font-style:italic"># (3)</span>
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;file_dep&#34;</span>: [source, VPY],
            <span style="color:#d14">&#34;targets&#34;</span>: [optimized],
            <span style="color:#d14">&#34;clean&#34;</span>: <span style="color:#000;font-weight:bold">True</span>,
        }

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_hpgl</span>():
    <span style="color:#d14">&#34;&#34;&#34;convert to HPGL&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:                                             <span style="color:#998;font-style:italic"># (4)</span>
        optimized <span style="color:#000;font-weight:bold">=</span> optimized_path(source)                             <span style="color:#998;font-style:italic"># (5)</span>
        hpgl <span style="color:#000;font-weight:bold">=</span> hpgl_path(source)
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39; write -d hp7475a -p a4 -q -c &#39;</span><span style="color:#d14">{</span>hpgl<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;file_dep&#34;</span>: [optimized],                                   <span style="color:#998;font-style:italic"># (6)</span>
            <span style="color:#d14">&#34;targets&#34;</span>: [hpgl],                                         <span style="color:#998;font-style:italic"># (7)</span>
            <span style="color:#d14">&#34;clean&#34;</span>: <span style="color:#000;font-weight:bold">True</span>,
        }
</code></pre></div><p>Let&rsquo;s examine the changes one-by-one.</p>
<ol>
<li>To clean things up and avoid code duplication, we factored in <code>optimized_path()</code> the code to derive the path of an optimised SVG from a source SVG.</li>
<li>We do the same to derive the path of an HPGL output from a source SVG in the <code>hpgl_path()</code> function. Note that neither of these function names start with <code>task_</code>, so they aren&rsquo;t interpreted as tasks by <em>doit</em>.</li>
<li>The only change to the <code>optimize</code> task is to use the <code>optimized_path()</code> helper function.</li>
<li>This part is interesting. The purpose of the <code>hpgl</code> task is to convert optimised SVG into HPGL files, yet we iterate over the <em>source</em> SVGs instead. The reason is, for our purposes, <code>SOURCES</code> is our master &ldquo;TODO list&rdquo;. Everything the <code>hpgl</code> task must do is indirectly due to the presence of source SVGs.</li>
<li>The source path is used <em>only</em> to derive the paths for the optimised SVG as well as the HPGL output. In particular, notice how <code>source</code> is not used anywhere in the return dictionaries.</li>
<li>The optimised SVGs is now a dependency (as opposed to a target in the <code>optimize</code> task).</li>
<li>Instead, the target is the HPGL file.</li>
</ol>
<p>These two tasks collectively form a &ldquo;pipeline&rdquo;. The output (or <em>target</em>) of the first task corresponds to the input (or <em>dependency</em>) of the second. <em>doit</em> understands that thanks to the <code>&quot;file_dep&quot;</code> and <code>&quot;targets&quot;</code> entries being properly populated&mdash;and can now be smart about it!</p>
<p>Let&rsquo;s take it for a spin by executing the <code>hpgl</code> task:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit hpgl
.  optimize:dots
.  optimize:halftone
.  optimize:hline
.  hpgl:dots
.  hpgl:halftone
.  hpgl:hline
</code></pre></div><p><em>doit</em> knows that it needs optimised SVGs to create HPGL file, so it automatically executes the <code>optimize</code> task.</p>
<p>Let&rsquo;s remove a single HPGL file to test what happens. This can be done using the <code>doit clean</code> command:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit clean hpgl:hline
hpgl:hline - removing file <span style="color:#d14">&#39;.../hpgl/hline.hpgl&#39;</span>
</code></pre></div><p>This is what happens when we run the <code>hpgl</code> task again:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit hpgl
-- optimize:dots
-- optimize:halftone
-- optimize:hline
-- hpgl:dots
-- hpgl:halftone
.  hpgl:hline
</code></pre></div><p>The optimised version of <code>hline.svg</code> is still present and up-to-date, so the corresponding task is skipped. Only the HPGL conversion is executed.</p>
<p>Now, let&rsquo;s change one of the source files, like we did earlier:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ <span style="color:#0086b3">echo</span> <span style="color:#d14">&#34; &#34;</span> &gt;&gt; originals/dots.svg  
$ doit hpgl
.  optimize:dots
-- optimize:halftone
-- optimize:hline
.  hpgl:dots
-- hpgl:halftone
-- hpgl:hline
</code></pre></div><p><em>doit</em> correctly runs both the <code>optimize</code> and <code>hpgl</code> sub-tasks for the corresponding file! 🎉</p>
<h2 id="helper-tasks">Helper tasks</h2>
<p>Tasks don&rsquo;t <em>have</em> to be part of an intricate pipeline with carefully specified targets and dependencies. They can also be just a nice little helper that encapsulate a useful shell command.</p>
<p>Consider for example this task, which can readily be added to our <code>dodo.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_show</span>():
    <span style="color:#d14">&#34;&#34;&#34;display SVG&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [<span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read </span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14"> show&#34;</span>],
        }
</code></pre></div><p>Its action consist of loading the source SVG and displaying it with <em>vpype</em>. This isn&rsquo;t necessarily part of your workflow, but is convenient to have handy:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit show:dots
</code></pre></div><p>The corresponding SVG is displayed by the <em>vpype</em> viewer:</p>
<img src="/batch-processing-doit-vpype/dots.png"alt="*vpype* viewer display a SVGs containing many dots arranged in a circle"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This example is taken from <a href="https://github.com/abey79/vpype-perspective"><em>vpype-perspective</em></a>, where all the README&rsquo;s figures are made from VPYs files stored in the repository&rsquo;s <a href="https://github.com/abey79/vpype-perspective/tree/main/examples/figures"><code>examples/figures</code></a> subdirectory. The conversion of these VPYs into SVGs is handled by <em>doit</em> using this <a href="https://github.com/abey79/vpype-perspective/blob/main/examples/dodo.py"><code>dodo.py</code></a> file. It&rsquo;s a nice example of what can be done with <em>doit</em>.</p>
<h2 id="final-words">Final words</h2>
<p>If you made it that far, I hope you are convinced of how useful <em>doit</em> is for workflow automation.</p>
<p>In this article, I focused on <em>vpype</em>, but <em>doit</em> can be used for entirely different things. As a matter of fact, I used it to automate my <a href="https://twitter.com/abey79/status/1528735353741484033">#plotloop machine</a>, which I&rsquo;ll describe in an upcoming article.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/px_mVzLROOY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="#plotloop automatic machine"></iframe>
</div>

<br/>
<p>One of <em>doit</em> drawbacks is the fact that its <code>dodo.py</code> file is written in Python. Creating one requires at least <em>some</em> Python basics&mdash;or willingness to acquire them. This might put off people uninterested by code.</p>
<p>But this is also its greatest strength. You wield the full power of Python when writing your <code>dodo.py</code> file, without any of the constraints of configuration languages such as <a href="https://yaml.org">YAML</a> or <a href="https://toml.io/en/">TOML</a>. This extends the possibilities <em>much</em> further than what was covered here, and makes learning <em>doit</em> a great investment! 🎯</p>
<p>Ready to take the plunge? I&rsquo;m happy to help&mdash;just share details of your workflow in the comments 👇, on <a href="https://twitter.com/abey79">Twitter</a>/<a href="https://mastodon.social/@abey79">Mastodon</a>, or on the <a href="https://discord.com/invite/XHP3dBg">Drawingbots Discord</a>.</p>
<p><em><strong>Edit</strong>: TIL what &ldquo;dolt&rdquo; (lowercase L) means 😅, and changed DoIt (uppercase i) into <em>doit</em>, consistently with their documentation.</em></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The file may also have a different name, or be located elsewhere, but then its path should be provided to <code>doit</code>. Using <code>dodo.py</code> is simpler because this file is automatically detected and loaded by <em>doit</em>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>The code actually generates full paths.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>If you are used to <code>make</code> and similar systems, you might be tempted to <code>touch originals/halftone.svg</code> to trigger a rebuild instead of modifying the file&rsquo;s content. This doesn&rsquo;t work with <em>doit</em> as it uses a local database and file hashes instead of modification date to track dependencies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>By the way, you can parallelise the processing of large batches using <code>doit -n 8 optimize</code>, where <code>8</code> is the number of CPU cores to use.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>This bears strong similarities with software build systems, where compiled object files are created from source code by the compiler. As a matter of fact, <em>doit</em> can serve as a build system.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>This example is slightly over-engineered. <em>vpype</em> can optimise and export to HPGL in one command, so technically a single <em>doit</em> task is needed. Even if multiple commands were required (<em>vpype</em> or otherwise), they can all be listed in a single <em>doit</em> task&mdash;the <code>&quot;actions&quot;</code> entry is a list which can contain multiple items. It is still a relevant illustration for the many instances were multiple <em>doit</em> tasks are indeed useful.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: use Plausible.io with a Sphinx documentation hosted on RTD</title>
      <link>https://bylr.info/articles/2022/10/09/til-plausible-rtd/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/10/09/til-plausible-rtd/</guid>
      <description>Although Google Analytics is very easy to setup on a Read the Docs-based documentation website, it requires a cookie banner to be GDPR-compliant and is otherwise questionable from a privacy-preservation point-of-view. As a result, I much prefer to use and support the excellent EU-based Plausible.io for traffic metrics instead.
This article explains how to setup a Read the Docs-based documentation with Plausible.io such that metrics are enabled only on &amp;ldquo;production&amp;rdquo; builds — e.</description>
      <content:encoded><![CDATA[<p>Although Google Analytics is very easy to setup on a <a href="https://readthedocs.org"><em>Read the Docs</em></a>-based documentation website, it requires a cookie banner to be <a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation">GDPR</a>-compliant and is otherwise questionable from a privacy-preservation point-of-view. As a result, I much prefer to use and support the excellent EU-based <a href="https://plausible.io/">Plausible.io</a> for traffic metrics instead.</p>
<p>This article explains how to setup a <em>Read the Docs</em>-based documentation with Plausible.io such that metrics are enabled only on &ldquo;production&rdquo; builds — e.g. the &ldquo;latest&rdquo; builds from the main branch and the version-tagged builds. This minimises the contamination of traffic statistics by development-related activities.</p>
<p>To achieve this, the basic idea is to customise your Sphinx template such that the <a href="https://plausible.io/docs/plausible-script">Plausible.io script</a> is only included when a <code>conf.py</code>-defined flag is set to <code>True</code>. This flag is then set based on <a href="https://docs.readthedocs.io/en/stable/environment-variables.html">environment variables provided by <em>Read the Docs</em></a>.</p>
<p>Let&rsquo;s dive in the details a step at a time.</p>
<h2 id="enabling-templates">Enabling templates</h2>
<p>If you haven&rsquo;t done so already (for example to <a href="https://bylr.info/articles/2022/05/10/api-doc-with-sphinx-autoapi/">customise your API documentation</a>), create a <code>_templates</code> sub-directory and let Sphinx know that this is where custom templates are to be found:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># conf.py</span>

templates_path <span style="color:#000;font-weight:bold">=</span> [<span style="color:#d14">&#34;_templates&#34;</span>]
</code></pre></div><h2 id="customising-the-template">Customising the template</h2>
<p>Then, a custom template can be created to include the Plausible.io script. Create a <code>_templates/base.html</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#998;font-style:italic">&lt;!-- _templates/base.html --&gt;</span>
{% extends &#34;!base.html&#34; %}
{% block extrahead %}
    {% if enable_plausible %}
        &lt;<span style="color:#000080">script</span> <span style="color:#008080">defer</span> <span style="color:#008080">data-domain</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;myproject.readthedocs.io&#34;</span>
                <span style="color:#008080">src</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;https://plausible.io/js/script.js&#34;</span>&gt;&lt;/<span style="color:#000080">script</span>&gt;
    {% endif %}
    {{ super() }}
{% endblock %}
</code></pre></div><p>In <code>_templates/base.html</code>, replace <code>myproject.readthedocs.io</code> by the actual domain name of your documentation. This domain name must also be enabled in your Plausible.io account.</p>
<p>Note that the <code>&lt;script&gt;</code> tag is added <em>only</em> if the template variable <code>enable_plausible</code> evaluates to <code>True</code>. This is how we can control whether or not metrics should be enabled for a given build.</p>
<p><strong>Important</strong>: I&rsquo;m using the <a href="https://pradyunsg.me/furo/quickstart/">Furo</a> theme, which uses <code>base.html</code> as main HTML file. Other themes (including the default Sphinx theme) might be using <code>layout.html</code> instead, as indicated in <a href="https://www.sphinx-doc.org/en/master/templating.html">Sphinx&rsquo;s documentation</a> on templating. This initially threw me off, so make sure to check which of your template&rsquo;s file must be extended.</p>
<h2 id="enabling-metrics-on-production-build">Enabling metrics on production build</h2>
<p>The <code>enable_plausible</code> variable must be defined for our template above to function. This is done in <code>conf.py</code> file using the <code>html_context</code> variable as follows:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># conf.py</span>
<span style="color:#000;font-weight:bold">import</span> <span style="color:#555">os</span>

<span style="color:#998;font-style:italic"># [...]</span>

READTHEDOCS_VERSION_TYPE <span style="color:#000;font-weight:bold">=</span> os<span style="color:#000;font-weight:bold">.</span>environ<span style="color:#000;font-weight:bold">.</span>get(<span style="color:#d14">&#34;READTHEDOCS_VERSION_TYPE&#34;</span>, <span style="color:#000;font-weight:bold">None</span>)

html_context <span style="color:#000;font-weight:bold">=</span> {
    <span style="color:#d14">&#34;enable_plausible&#34;</span>: READTHEDOCS_VERSION_TYPE <span style="color:#000;font-weight:bold">in</span> [<span style="color:#d14">&#34;branch&#34;</span>, <span style="color:#d14">&#34;tag&#34;</span>],
}
</code></pre></div><p>I use the <code>READTHEDOCS_VERSION_TYPE</code> environment variable, which is <a href="https://docs.readthedocs.io/en/stable/environment-variables.html#envvar-READTHEDOCS_VERSION_TYPE">set by <em>Read the Docs</em></a>. Its value is <code>&quot;branch&quot;</code> when the docs are built from the main branch, and <code>&quot;tag&quot;</code> when they are built from a tagged release. We want <code>enable_plausible</code> to be set to <code>True</code> in those instances. In any other case, including when <code>READTHEDOCS_VERSION_TYPE</code> is undefined (as is the case for local builds), <code>enable_plausible</code> is set to <code>False</code>.</p>
<p>And that&rsquo;s about it – these few steps are all it takes more compliant and privacy-friendly metrics thanks to <code>Plausible.io</code>. For a real-world example, you can check my <a href="https://vpype.readthedocs.io/en/latest/"><em>vpype</em></a> project (<a href="https://github.com/abey79/vpype/pull/546/files">relevant PR</a>).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: using Sphinx substitutions to generate text snippets from code</title>
      <link>https://bylr.info/articles/2022/09/30/til-sphinx-substitutions/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/09/30/til-sphinx-substitutions/</guid>
      <description>Often, technical documentations include lists or other snippets of text that are strongly related to some of the project&amp;rsquo;s code. vpype&amp;rsquo;s documentation is no exception to this.
For instance, the Built-in symbols section lists the units available to expressions:
These units are related to the following piece of code:
# vpype/utils.py UNITS = { &amp;#34;px&amp;#34;: 1.0, &amp;#34;in&amp;#34;: 96.0, &amp;#34;inch&amp;#34;: 96.0, &amp;#34;ft&amp;#34;: 12.0 * 96.0, &amp;#34;yd&amp;#34;: 36.0 * 96.0, &amp;#34;mi&amp;#34;: 1760.0 * 36.</description>
      <content:encoded><![CDATA[<p>Often, technical documentations include lists or other snippets of text that are strongly related to some of the project&rsquo;s code. <a href="https://github.com/abey79/vpype"><em>vpype</em></a>&rsquo;s <a href="https://vpype.readthedocs.io/">documentation</a> is no exception to this.</p>
<p>For instance, the <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#built-in-symbols">Built-in symbols</a> section lists the units available to expressions:</p>
<img src="/til-sphinx-substitutions/doc_units.png"alt="partial screenshot of vpype&#39;s documentation showing a list of units related to code"width="95%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>These units are related to the following piece of code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># vpype/utils.py</span>

UNITS <span style="color:#000;font-weight:bold">=</span> {
    <span style="color:#d14">&#34;px&#34;</span>: <span style="color:#099">1.0</span>,
    <span style="color:#d14">&#34;in&#34;</span>: <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;inch&#34;</span>: <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;ft&#34;</span>: <span style="color:#099">12.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;yd&#34;</span>: <span style="color:#099">36.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;mi&#34;</span>: <span style="color:#099">1760.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">36.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;mm&#34;</span>: <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">25.4</span>,
    <span style="color:#d14">&#34;cm&#34;</span>: <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">2.54</span>,
    <span style="color:#d14">&#34;m&#34;</span>: <span style="color:#099">100.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">2.54</span>,
    <span style="color:#d14">&#34;km&#34;</span>: <span style="color:#099">100_000.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">2.54</span>,
    <span style="color:#d14">&#34;pc&#34;</span>: <span style="color:#099">16.0</span>,
    <span style="color:#d14">&#34;pt&#34;</span>: <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">72.0</span>,
}
</code></pre></div><p>I recently added <a href="https://github.com/abey79/vpype/pull/541">support for more units</a> and, of course, the documentation was at risk of running out of sync. Obviously, generating the list of units based on the code would be a better solution. After some Googling, here is how I did it.</p>
<p>The basic idea is to use <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#substitutions">substitutions</a>. A substitution consists of assigning a text snippet to a keyword, and subsequently use said keyword (with the <code>|keyword|</code> syntax) in the documentation&rsquo;s body. The second insight is to use the <code>rst_prolog</code> variable (within the <code>conf.py</code> file) for the definition. This being regular Python, the definition can easily be auto-generated based on the original code.</p>
<p>Here is how it looks for the case above:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># docs/conf.py</span>

<span style="color:#000;font-weight:bold">import</span> <span style="color:#555">vpype</span> <span style="color:#000;font-weight:bold">as</span> <span style="color:#555">vp</span>

<span style="color:#998;font-style:italic"># [...]</span>

UNIT_STRINGS <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;, &#34;</span><span style="color:#000;font-weight:bold">.</span>join(<span style="color:#d14">f</span><span style="color:#d14">&#34;``</span><span style="color:#d14">{</span>s<span style="color:#d14">}</span><span style="color:#d14">``&#34;</span> <span style="color:#000;font-weight:bold">for</span> s <span style="color:#000;font-weight:bold">in</span> <span style="color:#0086b3">sorted</span>(vp<span style="color:#000;font-weight:bold">.</span>UNITS<span style="color:#000;font-weight:bold">.</span>keys()) <span style="color:#000;font-weight:bold">if</span> s <span style="color:#000;font-weight:bold">!=</span> <span style="color:#d14">&#34;in&#34;</span>)

rst_prolog <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">f</span><span style="color:#d14">&#34;&#34;&#34;
</span><span style="color:#d14">.. |units| replace:: </span><span style="color:#d14">{</span>UNIT_STRINGS<span style="color:#d14">}</span><span style="color:#d14">
</span><span style="color:#d14">&#34;&#34;&#34;</span>
</code></pre></div><p>(Note that <code>in</code> is explicitly excluded from the list because it is a reserved Python keyword and cannot be used in the context of <em>vpype</em> expressions.)</p>
<p>And this is how the substitution is used in the actual documentation file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rst" data-lang="rst"><span style="color:#999;font-weight:bold;font-style:italic">..
</span><span style="color:#999;font-weight:bold;font-style:italic">  docs/fundamentals.rst
</span><span style="color:#999;font-weight:bold;font-style:italic">
</span><span style="color:#999;font-weight:bold;font-style:italic"></span><span style="color:#099">*</span> Units constants (|units|).<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>  These variables may be used to convert values to CSS pixels unit, which <span style="color:#000;font-style:italic">*vpype*</span> uses internally. For example, the expression <span style="color:#d14">``%(3+4)*cm%``</span> evaluates to the pixel equivalent of 7 centimeters (e.g. ~264.6 pixels). (Note that expressions may overwrite these variables, e.g. to use the <span style="color:#d14">``m``</span> variable for another purpose.)<span style="color:#a61717;background-color:#e3d2d2">
</span></code></pre></div><p><em>Et voilà!</em> Nice and easy. I certainly expect to use this technique often in the future.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Generating beautiful Python API documentation with Sphinx AutoAPI</title>
      <link>https://bylr.info/articles/2022/05/10/api-doc-with-sphinx-autoapi/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/05/10/api-doc-with-sphinx-autoapi/</guid>
      <description>Following a recent discussion on Twitter, I decided to take yet another deep dive in my Python projects&#39; documentation and fix once and for all the issues I had with it. I first focused on the automatically-generated API reference section and this article details the results of my finding. Specifically, I&amp;rsquo;m using vsketch&amp;rsquo;s API reference, which I recently updated, as an example (documentation source.
This article addresses the following objectives:</description>
      <content:encoded><![CDATA[<p>Following a recent <a href="https://twitter.com/abey79/status/1521484512596746246?s=20&amp;t=3kEAgQUDFiJDRzz77UdTgA">discussion</a> on Twitter, I decided to take yet another deep dive in my Python projects' documentation and fix once and for all the issues I had with it. I first focused on the automatically-generated API reference section and this article details the results of my finding. Specifically, I&rsquo;m using <em>vsketch</em>&rsquo;s <a href="https://vsketch.readthedocs.io/en/latest/autoapi/vsketch/index.html">API reference</a>, which I recently updated, as an example (<a href="https://github.com/abey79/vsketch/tree/master/docs">documentation source</a>.</p>
<p>This article addresses the following objectives:</p>
<ul>
<li>Produce a beautiful API documentation based on the code docstrings that is both nice to look at and easy to navigate.</li>
<li>Support for a proper table of content navigation down to each class/module&rsquo;s member.</li>
<li>Nice looking summary tables listing modules' and classes' contents.</li>
</ul>
<img src="/sphinx-autoapi/example_doc.png"alt="Example of documentation generated with this article&#39;s techniques"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This article targets an audience of FOSS maintainers who are unhappy with the state of their project&rsquo;s API documentation, and are frustrated with the process of improving it. A basic understanding of Sphinx as well as an existing documentation setup is assumed. This article basically contains everything I wish I was told when I first started on my API reference improvement journey. For the beginners, I&rsquo;ll provide pointers to help setting up a basic Sphinx.</p>
<p>Note that although this article is structured as a tutorial, it covers tips and techniques which are likely useful for other kinds of documentation customisation.</p>
<h2 id="basic-setup">Basic setup</h2>
<p>As stated above, the basic steps to setup a Sphinx-based documentation project are outside the scope of the present article. I suggest reviewing the following resources to get started:</p>
<ul>
<li><a href="https://twitter.com/mariatta">@Mariatta</a> made a <em>brilliant</em> <a href="https://sphinx-intro-tutorial.readthedocs.io/">tutorial</a> on how to kick-start a Sphinx documentation project.</li>
<li><a href="https://thomas-cokelaer.info">Thomas Cokelaer</a> has a very nice reStructuredText <a href="https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html">cheat sheet</a>.</li>
<li><a href="https://simonwillison.net">Simon Willison</a> wrote another <a href="https://simonwillison.net/2018/Aug/25/restructuredtext/">cheat sheet</a> which covers &ldquo;the subset of reStructuredText worth committing to memory&rdquo;.</li>
<li>Obviously, Sphinx&rsquo;s <a href="https://www.sphinx-doc.org/en/master/">documentation</a> is an important resource. Although it is somewhat arid for the newcomer, I strongly suggest not giving up on it. I had multiple &ldquo;oh there it is!&rdquo; moments with it in the process of writing this article.</li>
<li>Finally, <a href="https://readthedocs.org">Read the Docs</a> is likely the best place to host your documentation. It&rsquo;s very simple to setup and free for open source projects.</li>
</ul>
<p>As for the theme, my preference goes for <a href="https://pradyunsg.me">Pradyun Gedam</a>&rsquo;s <a href="https://github.com/pradyunsg/furo">Furo</a>. I&rsquo;m using it with the default configuration, so the only requirement is to enable it in your <code>conf.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">html_theme <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;furo&#34;</span>
</code></pre></div><p>Note that some of the CSS provided in this article may need adjustments should you opt for a different theme.</p>
<h2 id="autoapi-setup">Autoapi setup</h2>
<p>After trying both autodoc/autosummary and Sphinx AutoAPI, I opted to use the latter. Here are the main reasons behind this choice:</p>
<ul>
<li>Autosummary does not generate TOC entries for API elements such as classes/modules and their members. This is due to a <a href="https://github.com/sphinx-doc/sphinx/issues/6316">long-standing Sphinx limitation</a>. Autoapi works around this limitation (albeit imperfectly, as we&rsquo;ll later note).</li>
<li>Autosummary defaults to <a href="https://github.com/sphinx-doc/sphinx/issues/7912">not generating anything</a> and is in my experience frustrating to setup. In contrast, autoapi produces usable output out-of-the-box.</li>
<li>Templates are easier to write thanks to the rich &ldquo;mapper&rdquo; objects AutoAPI provides after parsing your code (see the <a href="#autoapi-objects">AutoAPI objects</a> section below).</li>
</ul>
<p>Note that there are two things called &ldquo;autoapi&rdquo; floating on the Internet: the <a href="https://github.com/readthedocs/sphinx-autoapi">Sphinx AutoAPI</a> project (<a href="https://sphinx-autoapi.readthedocs.io/en/latest/">documentation</a>) is the good one. The <a href="https://autoapi.readthedocs.io">other one</a> is unmaintained and barely documented. Make sure you don&rsquo;t loose time dealing with the wrong one.</p>
<h3 id="basics">Basics</h3>
<p>Setting up Sphinx AutoAPI is covered in their <a href="https://sphinx-autoapi.readthedocs.io/en/latest/tutorials.html#python">documentation</a>. It boils down to the following steps.</p>
<ol>
<li>Install the <code>sphinx-autoapi</code> package:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ pip install sphinx-autoapi
</code></pre></div></li>
<li>Add AutoAPI it to the Sphinx extension list:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">extensions <span style="color:#000;font-weight:bold">=</span> [
    <span style="color:#000;font-weight:bold">...</span>,
    <span style="color:#d14">&#39;autoapi.extension&#39;</span>,
]
</code></pre></div></li>
<li>List your package directories (or the directory containing them) and set basic options:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">autoapi_dirs <span style="color:#000;font-weight:bold">=</span> [<span style="color:#d14">&#39;../mypackage&#39;</span>]
autoapi_type <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;python&#34;</span>
</code></pre></div></li>
<li>Add the generated documentation to your <code>index.rst</code> toctree:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rst" data-lang="rst">.. <span style="color:#000;font-weight:bold">toctree</span>::<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#458;font-weight:bold">:maxdepth:</span> <span style="color:#900;font-weight:bold">3</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#999;font-weight:bold;font-style:italic">   ...
</span><span style="color:#999;font-weight:bold;font-style:italic">   autoapi/index
</span></code></pre></div></li>
</ol>
<h3 id="setting-up-templates">Setting up templates</h3>
<p>We will customise Sphinx AutoAPI&rsquo;s default templates. The easiest is to copy Sphinx AutoAPI&rsquo;s default templates in your project to serve as a starting point.</p>
<p>First, run the following commands (adjusting for your Python version) from your documentation directory:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir _templates
$ mkdir _template/autoapi
$ cp <span style="color:#008080">$VIRTUAL_ENV</span>/lib/python3.10/site-packages/autoapi/templates/index.rst _templates/autoapi/
$ cp -r <span style="color:#008080">$VIRTUAL_ENV</span>/lib/python3.10/site-packages/autoapi/templates/python _templates/autoapi/ 
</code></pre></div><p>Then, tell Sphinx AutoAPI of its template directory in your <code>conf.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">autoapi_template_dir <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;_templates/autoapi&#34;</span>
</code></pre></div><p>A useful tip is to make a Git commit just after copying the built-in templates, such that you can track (and revert) your modifications. I&rsquo;ve used this extensively while working on my templates.</p>
<p>At this point, I suggest spending some time to become acquainted with the built-in templates and how they are organised and implemented. If you haven&rsquo;t used it before, it is also useful to review the Jinja2 templating language <a href="https://jinja.palletsprojects.com">documentation</a>.</p>
<h3 id="other-configuration-options">Other configuration options</h3>
<h4 id="autoapi_options"><code>autoapi_options</code></h4>
<p>The <code>autoapi_options</code> controls various aspect of the generated documentation, including the type of class/module members that are listed. Its default value is sensible but I still felt like customising it:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">autoapi_options <span style="color:#000;font-weight:bold">=</span> [
    <span style="color:#d14">&#34;members&#34;</span>,
    <span style="color:#d14">&#34;undoc-members&#34;</span>,
    <span style="color:#d14">&#34;show-inheritance&#34;</span>,
    <span style="color:#d14">&#34;show-module-summary&#34;</span>,
    <span style="color:#d14">&#34;imported-members&#34;</span>,
]
</code></pre></div><p>In particular, I want the summary at the top of the module&rsquo;s documentation (<code>show-module-summary</code>), but we will heavily customise it. Check <a href="https://sphinx-autoapi.readthedocs.io/en/latest/reference/config.html#confval-autoapi_options">the documentation</a> for a list of available options and their descriptions.</p>
<h4 id="autoapi_keep_files"><code>autoapi_keep_files</code></h4>
<p>Another useful option is <code>autoapi_keep_files</code>. Sphinx-autoapi generates .rst pages for the documentation during the build process, but defaults to deleting them after completion. It&rsquo;s often useful to keep them around for inspection and debugging purposes:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">autoapi_keep_files <span style="color:#000;font-weight:bold">=</span> <span style="color:#000;font-weight:bold">True</span>
</code></pre></div><h4 id="autodoc_typehints"><code>autodoc_typehints</code></h4>
<p>This is technically an autodoc setting, but Sphinx AutoAPI honours it. It controls if/where type hints are included in the documentation. The possible values are the following:</p>
<ul>
<li><code>&quot;signature&quot;</code>: type hints are included in the function signature, which appears first in the member&rsquo;s documentation</li>
<li><code>&quot;description&quot;</code>: type hints are included within the function description, when the arguments are listed</li>
<li><code>&quot;both&quot;</code>: type hints are included in both places</li>
<li><code>&quot;none&quot;</code>: type hints are not included</li>
</ul>
<p>My preference goes for <code>&quot;signature&quot;</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">autodoc_typehints <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;signature&#34;</span>
</code></pre></div><h3 id="autoapi-objects">AutoAPI objects</h3>
<p>Understanding the Sphinx AutoAPI objects is key to customising templates. They are one of the major difference with respect to autodoc/autosummary.</p>
<p>In order to generate the API documentation, the autodoc <em>loads</em> your actual code and uses Python&rsquo;s introspection capabilities to extract the required information from your module and class objects. In contrast, Sphinx AutoAPI <em>parses</em> your Python code and builds a collection of so-called &ldquo;mapper&rdquo; objects which describe your code and its structure. These objects are then passed on as context to the Jinja2 templating engine. Oddly, the documentation doesn&rsquo;t provide a reference about them, but their <a href="https://github.com/readthedocs/sphinx-autoapi/blob/master/autoapi/mappers/python/objects.py">implementation</a> is easy to read.</p>
<p>Here is a summary of some of the attributes that are useful when writing templates:</p>
<dl>
<dt><code>obj.name</code></dt>
<dd>Name of the mapped object, e.g. <code>&quot;MyClass&quot;</code> or <code>&quot;my_method&quot;</code>.</dd>
<dt><code>obj.id</code></dt>
<dd>Fully qualified name of the object, used for cross-referencing, e.g. <code>&quot;my_module.MyClass&quot;</code> or <code>&quot;my_module.MyClass.my_method&quot;</code>.</dd>
<dt><code>obj.summary</code></dt>
<dd>Summary of the object&rsquo;s docstring (i.e. the first line).</dd>
<dt><code>obj.docstring</code></dt>
<dd>Full docstring of the object.</dd>
<dt><code>obj.display</code></dt>
<dd>Indicates whether or not this object should be displayed, based on the options set in <code>conf.py</code> and the result of the <code>autoapi-skip-member</code> event (discussed later).</dd>
<dt><code>obj.children</code></dt>
<dd><em>(Modules and classes only)</em> List children functions, methods, attributes, etc.</dd>
<dt><code>obj.properties</code></dt>
<dd><em>(Functions and methods only)</em> List of properties, such as <code>&quot;classmethod&quot;</code>, <code>&quot;staticmethod&quot;</code>&quot;, <code>&quot;abstractmethod&quot;</code>, <code>&quot;property&quot;</code>, etc.</dd>
<dt><code>obj.obj.args</code></dt>
<dd><em>(Functions and methods only)</em> List of 4-tuples describing the function&rsquo;s arguments. The first item is the star operator if any (<code>&quot;*&quot;</code>, <code>&quot;**&quot;</code>, or <code>None</code>), the second is the argument name, the third is the argument type or <code>None</code>, and the fourth is the argument default value or <code>None</code>. This key piece of data will enable us to recreate the signatures according to our needs.</dd>
</dl>
<p>When working on your documentation, it is often useful to inspect the contents of these mapper objects using a debugger. This can be achieved by adding an handler for the <code>autoapi-skip-member</code> event and setting a conditional breakpoint:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">skip_member</span>(app, what, name, obj, skip, options):
    <span style="color:#998;font-style:italic"># conditional breakpoint here</span>
    <span style="color:#000;font-weight:bold">return</span> skip


<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">setup</span>(sphinx):
    sphinx<span style="color:#000;font-weight:bold">.</span>connect(<span style="color:#d14">&#34;autoapi-skip-member&#34;</span>, skip_member)
</code></pre></div><p>This event will be triggered for every single Python object parsed from your code. By breaking, for example, when <code>obj.name == &quot;my_module&quot;</code>, the <code>obj</code> argument and its children can be fully inspected. I use the following run configuration in my IDE for this:</p>
<ul>
<li>Execute module: <code>sphinx.cmd.build</code></li>
<li>Parameters: <code>-M html . _build</code></li>
<li>Working directory: <code>docs/</code></li>
</ul>
<h2 id="an-autosummary-like-macro">An <code>autosummary</code>-like macro</h2>
<p>By default, Sphinx AutoAPI provides a summary list of classes, functions, and attributes at the top of a module&rsquo;s documentation, which is very nice. Our objective is to add a similar table at the top of each class description, to facilitate navigation. However, Sphinx AutoAPI uses its own <code>autoapisummary</code> directive, which derives from autosummary&rsquo;s <code>autosummary</code> directive. Both suffer from the following limitations:</p>
<ul>
<li>The way callables are rendered is hard-coded and cannot be customised via templates. In particular, if <code>autodoc_typehints</code> is set to <code>&quot;signature&quot;</code> or <code>&quot;both&quot;</code>, <code>autosummary</code> will include type hints in the summary table as well. Unfortunately, this dramatically increases the length of the signature, which is detrimental to the table layout and usability. Alternatively, signatures can be entirely removed by using the <code>:nosignatures:</code> option. However, in this case, not even parenthesis are displayed, which hides the callable nature of the function. The best compromise is to have the full signature with their arguments, but without typing annotations.</li>
<li>Properties are listed as functions, including their signature. This hides the fact that, API-wise, they behave as data members (though it would still be useful to indicate that they are in fact properties).</li>
<li>There is not indication that a method is abstract, static, or class-based.</li>
</ul>
<p>To address these shortcomings, we will create a <a href="https://jinja.palletsprojects.com">Jinja2</a> template macro to replicate and improve on <code>autosummary</code>/<code>autoapisummary</code> functionality.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Our aim is to create tables where callable have their full – but unannotated – signature, where properties are indicated as such but rendered as attributes, and where static, class, and abstract methods are marked as such. Here is an example of this:</p>
<img src="/sphinx-autoapi/demo_class_doc.png"alt="Example of documentation generated with this article&#39;s techniques"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<h3 id="basic-macro-setup">Basic macro setup</h3>
<p>The basic insight is that a summary table can be implemented using Sphinx&rsquo;s <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html#list-table"><code>list-table</code></a>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rst" data-lang="rst">.. <span style="color:#000;font-weight:bold">list-table</span>:: Title<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#458;font-weight:bold">:header-rows:</span> <span style="color:#900;font-weight:bold">0</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#458;font-weight:bold">:widths:</span> <span style="color:#900;font-weight:bold">auto</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   
   <span style="color:#099">*</span> - Item 1<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>     <span style="color:#099">-</span> This is the description of the first item.<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#099">*</span> - Name 2<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>     - This is also a description, but this time for the second item.<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#099">*</span> - ...<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>     - ...<span style="color:#a61717;background-color:#e3d2d2">
</span></code></pre></div><img src="/sphinx-autoapi/basic_table.png"alt="Example of basic table."width="60%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>Such a table can be generated with the following Jinja macro:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">macro</span> <span style="color:#008080">auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">objs</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#39;&#39;</span><span style="color:#000;font-weight:bold">)</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>

.. list-table:: <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">title</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
   :header-rows: 0
   :widths: auto

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">for</span> <span style="color:#008080">obj</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">objs</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    * - obj.name
      - obj.summary
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endfor</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endmacro</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>To test this, create a file named <code>_templates/autoapi/macros.rst</code> and add the code above. Then, make the following edits to the <code>_templates/autoapi/python/module.rst</code> file:</p>
<ul>
<li>At the top of the file, import <code>macros.rst</code> to make it available for use:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">import</span> <span style="color:#d14">&#39;macros.rst&#39;</span> <span style="color:#000;font-weight:bold">as</span> <span style="color:#008080">macros</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div></li>
<li>Locate where the class summary is generated:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja">.. autoapisummary::

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">for</span> <span style="color:#008080">klass</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">visible_classes</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">klass.id</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endfor</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div></li>
<li>Replace the code above by a call to our macro:
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">macros.auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">visible_classes</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;Classes&#34;</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
</code></pre></div></li>
</ul>
<p>Here is the result I obtain with my project:</p>
<img src="/sphinx-autoapi/basic_class_table.png"alt="Example of basic class table."width="70%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This is a good start, but we&rsquo;re obviously far from the result we want. To start with, no cross-reference links are generated. And, had we passed functions or methods instead of classes to our macro, no signature would have been generated.</p>
<h3 id="custom-labels">Custom labels</h3>
<p>Before fixing our macro, we must discuss these nice looking &ldquo;prop&rdquo;, &ldquo;static&rdquo;, and &ldquo;class&rdquo; tag-like labels in the example tables above. These are implemented using a custom <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html">role</a> with some CSS attached to it.</p>
<p>This StackOverflow <a href="https://stackoverflow.com/a/9707879/229511">answer</a> explains how to create a custom role and make it globally available to your documentation. Basically, just add the following to your <code>conf.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rst_prolog <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;&#34;&#34;
</span><span style="color:#d14">.. role:: summarylabel
</span><span style="color:#d14">&#34;&#34;&#34;</span>
</code></pre></div><p>The <code>role</code> directive creates a new role which can then be used as follows:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rst" data-lang="rst"><span style="color:#008080">:summarylabel:</span><span style="color:#008080">`My Label`</span><span style="color:#a61717;background-color:#e3d2d2">
</span></code></pre></div><p>Sphinx generates the corresponding HTML code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#000080">span</span> <span style="color:#008080">class</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;summarylabel&#34;</span>&gt;My label&lt;/<span style="color:#000080">span</span>&gt;
</code></pre></div><p>Since it sets an HTML class named after the role, it&rsquo;s easy to adjust the label appearance using some custom CSS. Create a file named <code>_static/css/custom.css</code> in your documentation directory and add the following CSS:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#000080">span</span>.<span style="color:#458;font-weight:bold">summarylabel</span> {
    <span style="color:#000;font-weight:bold">background-color</span>: <span style="color:#900;font-weight:bold">var</span>(<span style="color:#000;font-weight:bold">--</span><span style="color:#000;font-weight:bold">color</span><span style="color:#000;font-weight:bold">-</span>foreground<span style="color:#000;font-weight:bold">-</span>secondary);
    <span style="color:#000;font-weight:bold">color</span>: <span style="color:#900;font-weight:bold">var</span>(<span style="color:#000;font-weight:bold">--</span><span style="color:#000;font-weight:bold">color</span><span style="color:#000;font-weight:bold">-</span>background<span style="color:#000;font-weight:bold">-</span>secondary);
    <span style="color:#000;font-weight:bold">font-size</span>: <span style="color:#099">70</span><span style="color:#458;font-weight:bold">%</span>;
    <span style="color:#000;font-weight:bold">padding-left</span>: <span style="color:#099">2</span><span style="color:#458;font-weight:bold">px</span>;
    <span style="color:#000;font-weight:bold">padding-right</span>: <span style="color:#099">2</span><span style="color:#458;font-weight:bold">px</span>;
    <span style="color:#000;font-weight:bold">border-radius</span>: <span style="color:#099">3</span><span style="color:#458;font-weight:bold">px</span>;
    <span style="color:#000;font-weight:bold">vertical-align</span>: <span style="color:#099">15</span><span style="color:#458;font-weight:bold">%</span>;
    <span style="color:#000;font-weight:bold">padding-bottom</span>: <span style="color:#099">2</span><span style="color:#458;font-weight:bold">px</span>;
    <span style="color:#000;font-weight:bold">filter</span>: <span style="color:#0086b3">opacity</span>(<span style="color:#099">40</span><span style="color:#458;font-weight:bold">%</span>);
}
</code></pre></div><p>Note the use of CSS variables in order to support Furo&rsquo;s dynamic night mode feature.</p>
<p>Finally, we must tell Sphinx about this CSS file in the <code>conf.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">html_css_files <span style="color:#000;font-weight:bold">=</span> [
    <span style="color:#d14">&#34;css/custom.css&#34;</span>,
]
</code></pre></div><h3 id="customising-the-table-appearance">Customising the table appearance</h3>
<p>A similar CSS approach can be used to customise the appearance of the summary table itself. By adding the <code>:class:</code> option to the <code>list-table</code> directive, we can tell Sphinx to attach an HTML class to the <code>&lt;table&gt;</code> element, which we can then customise with CSS:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rst" data-lang="rst">.. <span style="color:#000;font-weight:bold">list-table</span>:: Title<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#458;font-weight:bold">:header-rows:</span> <span style="color:#900;font-weight:bold">0</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#458;font-weight:bold">:widths:</span> <span style="color:#900;font-weight:bold">auto</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   <span style="color:#458;font-weight:bold">:class:</span> <span style="color:#900;font-weight:bold">summarytable</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>   
   <span style="color:#099">*</span> - ...<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>     <span style="color:#099">-</span> ...<span style="color:#a61717;background-color:#e3d2d2">
</span></code></pre></div><p>For my project, the only change I made to the default appearance is to force the table to span the entire width regardless of its contents. This can be done by adding the following code to our <code>custom.css</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#000080">table</span>.<span style="color:#458;font-weight:bold">summarytable</span> {
    <span style="color:#000;font-weight:bold">width</span>: <span style="color:#099">100</span><span style="color:#458;font-weight:bold">%</span>;
}
</code></pre></div><h3 id="putting-it-all-together">Putting it all together</h3>
<p>We are now ready to put everything together and improve our <code>auto_summary()</code> macro to our liking. Here is the final code for <code>macros.rst</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">macro</span> <span style="color:#008080">_render_item_name</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">obj</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">sig</span><span style="color:#000;font-weight:bold">=</span><span style="color:#000;font-weight:bold">False</span><span style="color:#000;font-weight:bold">)</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
:py:obj:`<span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">obj.name</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span> &lt;<span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">obj.id</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>&gt;`
     <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">sig</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
       \ (
       <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">for</span> <span style="color:#008080">arg</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">obj.obj.args</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
          <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">arg</span><span style="color:#000;font-weight:bold">[</span><span style="color:#099">0</span><span style="color:#000;font-weight:bold">]</span> <span style="color:#999;font-weight:bold;font-style:italic">%}{{</span> <span style="color:#008080">arg</span><span style="color:#000;font-weight:bold">[</span><span style="color:#099">0</span><span style="color:#000;font-weight:bold">]|</span><span style="color:#900;font-weight:bold">replace</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#39;*&#39;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#39;\*&#39;</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}{%</span> <span style="color:#000;font-weight:bold">endif</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}{{</span>  <span style="color:#008080">arg</span><span style="color:#000;font-weight:bold">[</span><span style="color:#099">1</span><span style="color:#000;font-weight:bold">]</span> -<span style="color:#999;font-weight:bold;font-style:italic">}}</span>
          <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">if</span> <span style="color:#000;font-weight:bold">not</span> <span style="color:#0086b3">loop</span><span style="color:#008080">.last</span>  <span style="color:#999;font-weight:bold;font-style:italic">%}</span>, <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
       <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">endfor</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
       )<span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">endif</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">endmacro</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">macro</span> <span style="color:#008080">_item</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">obj</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">sig</span><span style="color:#000;font-weight:bold">=</span><span style="color:#000;font-weight:bold">False</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">label</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#39;&#39;</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   * - <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">_render_item_name</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">obj</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">sig</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
     - <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">label</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>:summarylabel:`<span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">label</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>` <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">obj.summary</span> <span style="color:#999;font-weight:bold;font-style:italic">%}{{</span> <span style="color:#008080">obj.summary</span> <span style="color:#999;font-weight:bold;font-style:italic">}}{%</span> <span style="color:#000;font-weight:bold">else</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>\-<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#000;font-weight:bold">+</span><span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endmacro</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">macro</span> <span style="color:#008080">auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">objs</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#39;&#39;</span><span style="color:#000;font-weight:bold">)</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
.. list-table:: <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">title</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
   :header-rows: 0
   :widths: auto
   :class: summarytable

  <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">for</span> <span style="color:#008080">obj</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">objs</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">sig</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#000;font-weight:bold">(</span><span style="color:#008080">obj.type</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#000;font-weight:bold">[</span><span style="color:#d14">&#39;method&#39;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#39;function&#39;</span><span style="color:#000;font-weight:bold">]</span> <span style="color:#000;font-weight:bold">and</span> <span style="color:#000;font-weight:bold">not</span> <span style="color:#d14">&#39;property&#39;</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">obj.properties</span><span style="color:#000;font-weight:bold">)</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>

    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">if</span> <span style="color:#d14">&#39;property&#39;</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">obj.properties</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
      <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">label</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#39;prop&#39;</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">elif</span> <span style="color:#d14">&#39;classmethod&#39;</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">obj.properties</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
      <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">label</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#39;class&#39;</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">elif</span> <span style="color:#d14">&#39;abstractmethod&#39;</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">obj.properties</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
      <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">label</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#39;abc&#39;</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">elif</span> <span style="color:#d14">&#39;staticmethod&#39;</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">obj.properties</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
      <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">label</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#39;static&#39;</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">else</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
      <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">label</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#39;&#39;</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>
    <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">endif</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>

    <span style="color:#999;font-weight:bold;font-style:italic">{{</span><span style="color:#000;font-weight:bold">-</span> <span style="color:#008080">_item</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">obj</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">sig</span><span style="color:#000;font-weight:bold">=</span><span style="color:#008080">sig</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">label</span><span style="color:#000;font-weight:bold">=</span><span style="color:#008080">label</span><span style="color:#000;font-weight:bold">)</span> -<span style="color:#999;font-weight:bold;font-style:italic">}}</span>
  <span style="color:#999;font-weight:bold;font-style:italic">{%</span>- <span style="color:#000;font-weight:bold">endfor</span> -<span style="color:#999;font-weight:bold;font-style:italic">%}</span>

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endmacro</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>The work is now split in three macros:</p>
<dl>
<dt><code>auto_summary()</code></dt>
<dd>This is the &ldquo;public&rdquo; macro. It generates a table based on a list of mapper objects, with an optional title. It iterates over the list of objects, and, for each of them, determines if the signature should be generated (functions and non-property methods) and if some label should be attached. It then uses <code>_item()</code> to generate each object&rsquo;s code.</dd>
<dt><code>_item()</code></dt>
<dd>This helper macro generates the code for each object, prepending a label to the summary if requested.</dd>
<dt><code>_render_item_name()</code></dt>
<dd>This helper macro focuses on generating the properly-cross-referenced object name. If the signature is requested, it iterates over the <code>obj.obj.args</code> list to produce a full (but unannotated) list of arguments.</dd>
</dl>
<h2 id="improving-the-default-templates">Improving the default templates</h2>
<p>With our <code>auto_summary()</code> macro completed, we are now ready to customise our templates, but we still have one issue to resolve before we do so.</p>
<h3 id="categorising-objects-with-a-custom-jinja2-test">Categorising objects with a custom Jinja2 test</h3>
<p>As we saw in the <a href="#autoapi-objects">AutoAPI objects</a> section, mapper objects representing modules or classes have a <code>children</code> attribute which lists the objects it contains. For example, a module&rsquo;s <code>children</code> attribute lists all the classes, functions and attributes defined within it.</p>
<p>In order to categorise these children into separate sub-lists, the built-in templates heavily use the <a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.selectattr"><code>selectattr()</code></a> and <a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.rejectattr"><code>rejectattr()</code></a> filters. For example, a list of classes in a module can be obtained as follows:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">visible_children</span> <span style="color:#000;font-weight:bold">=</span>
    <span style="color:#008080">module_object.children</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;display&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">rejectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;imported&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">visible_classes</span> <span style="color:#000;font-weight:bold">=</span>
    <span style="color:#008080">visible_children</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;type&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;equalto&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;class&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>This code selects the visible (but not imported) children from <code>module_object</code>, and then further selects children which have their <code>type</code> set to <code>&quot;class&quot;</code>. In the code above, <a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-tests.eq"><code>&quot;equalto&quot;</code></a> is known as a Jinja <a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#tests">test</a>. There are many such <a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#builtin-tests">built-in tests</a> in Jinja2.</p>
<p>As stated before, we aim to categorise properties as attributes instead of methods. To that end, we will have to filter methods whose <code>properties</code> attribute contains <code>&quot;property&quot;</code>. Intuition dictates that the following code achieves this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">property_methods</span> <span style="color:#000;font-weight:bold">=</span>
    <span style="color:#008080">all_methods</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;properties&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;contains&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;property&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>The bad news is that no such <code>&quot;contains&quot;</code> test exists by default in Jinja2. The good news is that it is trivial to add one.</p>
<p>First, the actual test must be written. Add the following code to your <code>conf.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">contains</span>(seq, item):
    <span style="color:#000;font-weight:bold">return</span> item <span style="color:#000;font-weight:bold">in</span> seq
</code></pre></div><p>Then, we just need to add this test to the Jinja <a href="https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment">environment</a>. Sphinx AutoAPI provides a hook for that:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">prepare_jinja_env</span>(jinja_env) <span style="color:#000;font-weight:bold">-&gt;</span> <span style="color:#000;font-weight:bold">None</span>:
    jinja_env<span style="color:#000;font-weight:bold">.</span>tests[<span style="color:#d14">&#34;contains&#34;</span>] <span style="color:#000;font-weight:bold">=</span> contains

autoapi_prepare_jinja_env <span style="color:#000;font-weight:bold">=</span> prepare_jinja_env
</code></pre></div><p>With this in your <code>conf.py</code> file, the template code above will work as expected.</p>
<h3 id="updating-templates">Updating templates</h3>
<p>We previously replaced one of <code>module.rst</code>&rsquo;s use of <code>autoapisummary</code> by our <code>auto_summary()</code> macro (see <a href="#basic-macro-setup">Basic macro setup</a>). It is now time to generalise the use of our macro. At this stage, the details of how this is done is to a large extent up to reader&rsquo;s taste. The <a href="https://github.com/abey79/vsketch/tree/master/docs/_templates/autoapi">templates</a> of <a href="https://github.com/abey79/vsketch">vsketch</a> can serve as fully-functional example and can readily be used in another projects.</p>
<p>For the <code>module.rst</code> template, I have opted to simplify the overview&rsquo;s structure by just generating tables (without headings) for classes, functions, and attributes:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#d14">&#34;show-module-summary&#34;</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">autoapi_options</span> <span style="color:#000;font-weight:bold">and</span> <span style="color:#000;font-weight:bold">(</span><span style="color:#008080">visible_classes</span> <span style="color:#000;font-weight:bold">or</span> <span style="color:#008080">visible_functions</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">block</span> <span style="color:#008080">classes</span> <span style="color:#000;font-weight:bold">scoped</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">visible_classes</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">macros.auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">visible_classes</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;Classes&#34;</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endblock</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">block</span> <span style="color:#008080">functions</span> <span style="color:#000;font-weight:bold">scoped</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">visible_functions</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">macros.auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">visible_functions</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;Functions&#34;</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endblock</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>

<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">block</span> <span style="color:#008080">attributes</span> <span style="color:#000;font-weight:bold">scoped</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">visible_attributes</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">macros.auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">visible_attributes</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;Attributes&#34;</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endblock</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
<span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>For the <code>class.rst</code> template, I chose to rework the structure of the documentation into two <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-rubric">rubrics</a>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja">   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">visible_methods</span> <span style="color:#000;font-weight:bold">or</span> <span style="color:#008080">visible_attributes</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   .. rubric:: Overview

   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">summary_methods</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#008080">visible_methods</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">rejectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;properties&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;contains&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;property&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">summary_attributes</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#008080">visible_attributes</span> <span style="color:#000;font-weight:bold">+</span> <span style="color:#008080">visible_methods</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;properties&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;contains&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;property&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">summary_attributes</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">macros.auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">summary_attributes</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;Attributes&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">indent</span><span style="color:#000;font-weight:bold">(</span><span style="color:#099">3</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>

   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">if</span> <span style="color:#008080">summary_methods</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">macros.auto_summary</span><span style="color:#000;font-weight:bold">(</span><span style="color:#008080">summary_methods</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">title</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;Methods&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">indent</span><span style="color:#000;font-weight:bold">(</span><span style="color:#099">3</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>

   .. rubric:: Members

   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">for</span> <span style="color:#008080">attribute</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">visible_attributes</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">attribute.render</span><span style="color:#000;font-weight:bold">()|</span><span style="color:#900;font-weight:bold">indent</span><span style="color:#000;font-weight:bold">(</span><span style="color:#099">3</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endfor</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">for</span> <span style="color:#008080">method</span> <span style="color:#000;font-weight:bold">in</span> <span style="color:#008080">visible_methods</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{{</span> <span style="color:#008080">method.render</span><span style="color:#000;font-weight:bold">()|</span><span style="color:#900;font-weight:bold">indent</span><span style="color:#000;font-weight:bold">(</span><span style="color:#099">3</span><span style="color:#000;font-weight:bold">)</span> <span style="color:#999;font-weight:bold;font-style:italic">}}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endfor</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
   <span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">endif</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>Note the use of the custom <code>&quot;contains&quot;</code> Jinja2 test we implemented earlier.</p>
<h3 id="hiding-submodules">Hiding submodules</h3>
<p>Sphinx AutoAPI include all subpackages and submodules recursively, unless those are marked as private by prefixing their name with an underscore. In my packages' <code>__init__.py</code> file, I carefully import from submodules the objects which are meant to be public, but haven&rsquo;t necessarily marked the submodules as private. Sphinx AutoAPI has no option to control whether or not to add them (I <a href="https://github.com/readthedocs/sphinx-autoapi/issues/339">suggested</a> adding one), so I had to filter them out manually. This is done with the <code>autoapi-skip-member</code> event handler we mentioned earlier:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">skip_member</span>(app, what, name, obj, skip, options):
    <span style="color:#998;font-style:italic"># skip submodules</span>
    <span style="color:#000;font-weight:bold">if</span> what <span style="color:#000;font-weight:bold">==</span> <span style="color:#d14">&#34;module&#34;</span>:
        skip <span style="color:#000;font-weight:bold">=</span> <span style="color:#000;font-weight:bold">True</span>
    <span style="color:#000;font-weight:bold">return</span> skip

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">setup</span>(sphinx):
    sphinx<span style="color:#000;font-weight:bold">.</span>connect(<span style="color:#d14">&#34;autoapi-skip-member&#34;</span>, skip_member)
</code></pre></div><h3 id="hiding-members">Hiding members</h3>
<p>Likewise, it may happen that you want to hide specific members from the documentation without marking them as private. Again, the <code>autoapi-skip-member</code> event handler can do that. The following example is based from <a href="https://github.com/abey79/vsketch/blob/0d937c851ac528bf182d0b71eb42ead525848c60/docs/conf.py#L116">actual code</a> in <a href="https://github.com/abey79/vsketch"><em>vsketch</em></a>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">skip_member</span>(app, what, name, obj, skip, options):
    <span style="color:#000;font-weight:bold">if</span> <span style="color:#d14">&#34;vsketch.SketchClass&#34;</span> <span style="color:#000;font-weight:bold">in</span> name:
        <span style="color:#000;font-weight:bold">if</span> obj<span style="color:#000;font-weight:bold">.</span>name <span style="color:#000;font-weight:bold">in</span> [
            <span style="color:#d14">&#34;vsk&#34;</span>,
            <span style="color:#d14">&#34;param_set&#34;</span>,
            <span style="color:#d14">&#34;execute_draw&#34;</span>,
            <span style="color:#d14">&#34;ensure_finalized&#34;</span>,
            <span style="color:#d14">&#34;execute&#34;</span>,
            <span style="color:#d14">&#34;get_params&#34;</span>,
            <span style="color:#d14">&#34;set_param_set&#34;</span>,
        ]:
            skip <span style="color:#000;font-weight:bold">=</span> <span style="color:#000;font-weight:bold">True</span>
    <span style="color:#000;font-weight:bold">return</span> skip
</code></pre></div><p>Note that <code>name</code> is the fully qualified name of the object, so the <code>vsk</code> member has <code>name</code> set to <code>vsketch.SketchClass.vsk</code>. In contrast, <code>obj.name</code> is just the base name.</p>
<p>Also, for this to work as expected for modules, I had to change the following line in <code>module.rst</code></p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">visible_children</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#008080">obj.children</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;short_name&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;in&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">obj.all</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>into</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jinja" data-lang="jinja"><span style="color:#999;font-weight:bold;font-style:italic">{%</span> <span style="color:#000;font-weight:bold">set</span> <span style="color:#008080">visible_children</span> <span style="color:#000;font-weight:bold">=</span> <span style="color:#008080">obj.children</span><span style="color:#000;font-weight:bold">|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;display&#34;</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">selectattr</span><span style="color:#000;font-weight:bold">(</span><span style="color:#d14">&#34;short_name&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#d14">&#34;in&#34;</span><span style="color:#000;font-weight:bold">,</span> <span style="color:#008080">obj.all</span><span style="color:#000;font-weight:bold">)|</span><span style="color:#900;font-weight:bold">list</span> <span style="color:#999;font-weight:bold;font-style:italic">%}</span>
</code></pre></div><p>Without this modification, objects marked as skipped would show up in the summary tables.</p>
<h3 id="ordering">Ordering</h3>
<p>By default, Sphinx AutoAPI generates the documentation in the same order as the code. This can be <a href="https://sphinx-autoapi.readthedocs.io/en/latest/reference/config.html?highlight=ordering#confval-autoapi_member_order">changed</a> to alphabetical order, I like being in control from the code.</p>
<p>In <a href="https://github.com/abey79/vsketch"><em>vsketch</em></a>, the top level content is determined by the imports in my package&rsquo;s <code>__init__.py</code> file, so the <code>import</code> statements themself matter. Since I&rsquo;m using <a href="https://pycqa.github.io/isort/">isort</a>, I had to short-circuit it in this particular case:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># vsketch/__init__.py</span>

<span style="color:#998;font-style:italic"># isort: skip_file</span>

<span style="color:#998;font-style:italic"># Ordered for the documentation</span>
<span style="color:#000;font-weight:bold">from</span> <span style="color:#555">.vsketch</span> <span style="color:#000;font-weight:bold">import</span> Vsketch
<span style="color:#000;font-weight:bold">from</span> <span style="color:#555">.shape</span> <span style="color:#000;font-weight:bold">import</span> Shape
<span style="color:#000;font-weight:bold">from</span> <span style="color:#555">.sketch_class</span> <span style="color:#000;font-weight:bold">import</span> SketchClass, Param, ParamType

<span style="color:#000;font-weight:bold">from</span> <span style="color:#555">.easing</span> <span style="color:#000;font-weight:bold">import</span> EASING_FUNCTIONS
<span style="color:#000;font-weight:bold">from</span> <span style="color:#555">.utils</span> <span style="color:#000;font-weight:bold">import</span> working_directory
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Well, this ended up being much longer than anticipated 😅 – if you made it this far, congratulations! 🎉</p>
<p>Here is what we covered:</p>
<ul>
<li>We built on a basic Sphinx project and added AutoAPI to generate an API reference documentation.</li>
<li>We created custom templates based on the built-in templates provided by AutoAPI.</li>
<li>We reviewed the mapper objects created by AutoAPI to described our code.</li>
<li>We learned how to use a debugger to easily inspect these objects.</li>
<li>We crafted an <code>autosummary</code>-like macro named <code>auto_summary()</code> to build beautiful summary tables.</li>
<li>We customised these tables with custom CSS.</li>
<li>We used a custom Sphinx role and CSS to create tag-like labels to be used in the summary tables.</li>
<li>We learned of Jinja2&rsquo;s tests and created a custom one.</li>
<li>We controlled the visibility of submodules and members using a <code>autoapi-skip-member</code> event handler.</li>
<li>We learned how to control ordering from our code.</li>
</ul>
<p>Like any software project, improving the documentation is a never-ending endeavour. As it turns out, there is one remaining issue that has been bugging me and is yet unresolved. Due to a limitation in Sphinx, AutoAPI has a tendency to mangle the TOC ordering, especially when section headings are emitted from the templates. Check these <a href="https://github.com/readthedocs/sphinx-autoapi/issues/283">two</a> <a href="https://github.com/sphinx-doc/sphinx/issues/6316#issuecomment-1066195555">issues</a> for more information. Hopefully they&rsquo;ll get solved in the future.</p>
<p>I shall conclude by stating that, by all means, I do not consider myself a Sphinx expert — much to the contrary. I <em>did</em> spend a lot of time improving my API documentation, and figured it would be wasteful not to share my findings, especially given the relative scarcity of information on advanced Sphinx usage patterns. As a result, it is rather likely that I made mistakes and sub-optimal choices. If so, please do provide feedback, and I&rsquo;ll update this article to improve it.</p>
<p><em>Edit: updated title and intro to clarify the nature of the API discussed, i.e. Python API (2022-05-11).</em></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Ideally, these shortcomings would be addressed using an extension and a custom directive, or even by contributing the improvement back to the Sphinx or AutoAPI projects. This is sadly beyond my skills. Also, the template method is anyway useful for highly specific requirements where writing an extension wouldn&rsquo;t be warranted.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: aligning horizontal or vertical lines to the pixel grid with OpenGL</title>
      <link>https://bylr.info/articles/2022/04/05/til-aligning-horizontal-or-vertical-lines-to-the-pixel-grid-with-opengl/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/04/05/til-aligning-horizontal-or-vertical-lines-to-the-pixel-grid-with-opengl/</guid>
      <description>When I started using my new M1 Max MacBook Pro in December, a bunch of vpype&amp;rsquo;s tests started to fail. The failing tests were all image-based: an image is rendered and then compared to a previously-generated, reference image. This process is made easy thanks to this Pytest fixture.
In this case, the reference images were generated long ago on my previous, Intel/AMD-based MacBook Pro. This GIF highlights the discrepancy I&amp;rsquo;d get with images generated on my new computer (notice how the ruler&amp;rsquo;s thickness varies):</description>
      <content:encoded><![CDATA[<p>When I started using my new M1 Max MacBook Pro in December, a bunch of <a href="https://github.com/abey79/vpype"><em>vpype</em></a>&rsquo;s tests started to fail. The failing tests were all image-based: an image is rendered and then compared to a previously-generated, reference image. This process is made easy thanks to <a href="https://github.com/abey79/vpype/blob/cd95e2da1940171e33ed0001255b763fa0d5f082/tests/conftest.py#L96">this Pytest fixture</a>.</p>
<p>In this case, the reference images were generated long ago on my previous, Intel/AMD-based MacBook Pro. This GIF highlights the discrepancy I&rsquo;d get with images generated on my new computer (notice how the ruler&rsquo;s thickness varies):</p>
<img src="/til-pixel-grid/m1_render.gif"alt="animated gif highlighting rendering discrepancy with horizontal and vertical lines"width="650px"style="display:block;margin-left:auto;margin-right:auto"/>
<p>As I&rsquo;m currently working on this viewer again, I finally spent two days tracking this issue – and finally found its cause.</p>
<p>Without giving it a thought, I first used integer coordinates for those ruler lines. However, coordinates refer to pixel <em>boundaries</em> – not pixel <em>centres</em>. This means than an horizontal line with integer coordinates (e.g. <code>[(2, 2), (7, 2)]</code>) sits halfway between two consecutive rows of pixel:</p>
<img src="/til-pixel-grid/pixel_grid.png"alt="schematic of a line not aligned with the pixel grid"width="500px"style="display:block;margin-left:auto;margin-right:auto"/>
<p>Which of the 2nd or 3rd row of pixel eventually gets drawn is up to a coin toss – or rather the rounding strategy of your particular OpenGL driver/GPU/OS combination.</p>
<p>By offsetting the coordinates by half a pixel (e.g. <code>[(2, 2.5), (7, 2.5)]</code>), one can force the line on a specific pixel row and avoid any rounding:</p>
<img src="/til-pixel-grid/pixel_grid_aligned.png"alt="schematic of a line aligned with the pixel grid"width="500px"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This makes the rendering more predictable across platforms.</p>
<p>Ultimately, the fix was very simple (I just changed the ruler thickness from <code>20</code> to <code>19.5</code>), but figuring it out was tricky (<a href="https://ptb.discord.com/channels/550302843777712148/811289127609827358/960561872774500412">relevant discussions</a> on <a href="https://github.com/moderngl/moderngl">ModernGL</a>&rsquo;s Discord server). Hopefully I wont forget about it after writing this TIL.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
