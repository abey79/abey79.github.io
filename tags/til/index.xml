<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>til on bylr.info</title>
    <link>https://bylr.info/tags/til/</link>
    <description>Recent content in til on bylr.info</description>
    <image>
      <url>https://bylr.info/android-chrome-512x512.png</url>
      <link>https://bylr.info/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2022 Antoine Beyeler â€“</copyright>
    <lastBuildDate>Sat, 29 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bylr.info/tags/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL: running Textual on a framebuffer terminal emulator for Linux</title>
      <link>https://bylr.info/articles/2022/10/29/til-textual-fb-term/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/10/29/til-textual-fb-term/</guid>
      <description>My successful (yet probably vain) attempt at running Textual (a modern TUI framework) on a Raspberry Pi without X11 by using fbpad (a framebuffer terminal emulator for Linux).</description>
      <content:encoded><![CDATA[<p>Excuse me&hellip; Running a what on what terminal what? ðŸ¤”</p>
<p>So, here is the thing. A <a href="https://www.raspberrypi.org">Raspberry PI</a> paired with a touch-screen can serve as a touch-based, human-machine interface (HMI) for things like DIY projects, robots, and whatnot. For example, this is how I control my <a href="https://axidraw.com">Axidraw</a> plotter. The current implementation of my HMI software â€“ named <a href="https://github.com/plottertools/taxi">taxi</a> â€“ uses <a href="https://kivy.org">Kivy</a>. Here it is in action:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/kELtKbjg-fo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="Mobile plotting station"></iframe>
</div>

<br/>
<p>This requires a full X11 and desktop environment (e.g. <a href="http://www.lxde.org">LXDE</a>, used by default by <a href="https://www.raspberrypi.com/software/">Raspberry Pi OS</a>), which is heavy (the full Raspberry Pi OS doesn&rsquo;t fit on a 4GB memory card) and harder to turn into kiosk mode.</p>
<p>Ever since I first learned of the modern <a href="https://en.wikipedia.org/wiki/Text-based_user_interface">TUI</a> framework <a href="https://textual.textualize.io">Textual</a>, I&rsquo;ve been thinking of using it as a lightweight, kiosk-mode, touch-based HMI with minimal requirements for the underlying OS. All it needs is a terminal!</p>
<p>My first idea was to simply use the <a href="https://en.wikipedia.org/wiki/Linux_console">Linux console</a>, which is the terminal-y thing you see at boot, and can use to login if you don&rsquo;t have a X11/desktop environment. Unfortunately, due to severe limitations in the number of glyphs it can handle (or of my comprehension of it), the results were&hellip; underwhelming:</p>
<img src="/til-textual-fb-term/console-parallels.png"alt="`python -m textual` running with the Linux console on a Debian VM"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This screenshot was made with a <a href="https://www.debian.org">Debian</a> VM running in <a href="https://www.parallels.com">Parallels Desktop</a>, but the it&rsquo;s the same for a Raspberry Pi and a physical screen.</p>
<p>Then I learned about framebuffer terminal emulators. The <a href="https://en.wikipedia.org/wiki/Linux_framebuffer">Linux framebuffer</a> is a subsystem to display on-screen graphics over the system console without relying on a X11 server. Framebuffer terminal emulators basically emulate a terminal and &ldquo;draw&rdquo; it to the screen using the Linux framebuffer. As it turns out, they are extremely niche pieces of software, so it felt like a trip to the past to get them to run! ðŸ˜…</p>
<p>For a bunch of reasons discussed below, this is most likely a dead-end in my quest. Still, I learned a few things and I surely won&rsquo;t remember any of it unless it&rsquo;s writen down.</p>
<h2 id="the-plan">The plan</h2>
<p>I found a bunch of framebuffer terminal emulators, including <a href="https://docs.kernel.org/fb/fbcon.html">fbcon</a>, <a href="https://github.com/sfzhi/fbterm">fbterm</a>, <a href="https://github.com/bleenco/bterm">bterm</a>, <a href="https://github.com/uobikiemukot/yaft">yaft</a>, and <a href="https://github.com/aligrudi/fbpad">fbpad</a>.  I tried some of them (not all), and fbpad, by <a href="http://litcave.rudi.ir">Ali Gholami Rudi</a>, was the first to yield decent results, so it&rsquo;ll be the focus of this article.</p>
<p>Here is an overview of the steps:</p>
<ol>
<li>Download a suitable TTF font.</li>
<li>Download and build ft2tf, and use it to convert the font to fbpad&rsquo;s custom format.</li>
<li>Download, configure, and build fbpad.</li>
<li>Download Textual and run it in fbpad.</li>
</ol>
<p>I&rsquo;ll assume a Debian type of OS, like Raspberry Pi OS, Ubuntu, or a Debian distro.</p>
<h2 id="preparing-the-font">Preparing the font</h2>
<p>First, let&rsquo;s download a suitable monospace font. I chose to use <a href="https://fonts.google.com/specimen/Fira+Code">Fira Code</a>.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#0086b3">cd</span> ~
wget -O fira.zip <span style="color:#d14">&#34;https://fonts.google.com/download?family=Fira%20Code&#34;</span>
unzip fira.zip -d fira
</code></pre></div><p>Then, download and build ft2tf, a font conversion tool by the same author as fbpad:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#0086b3">cd</span> ~
apt-get install libfreetype-dev
wget http://litcave.rudi.ir/ft2tf-0.9.tar.gz
tar xzf ft2tf-0.9.tar.gz
<span style="color:#0086b3">cd</span> ft2tf-0.9
make
</code></pre></div><p>Now we&rsquo;re ready to convert the font:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./ft2tf -h18 -w10 ~/fira/static/FiraCode-Regular.ttf:6 &gt; ~/fira/fira.tf
</code></pre></div><p>The <code>-h</code> and <code>-w</code> options specify the final glyph size in the terminal, which in turn determines the column and row count based on your screen resolution. The <code>:6</code> part after the font path specifies the size at which the TTF font is scaled before conversion. I found these values to work decently well for my Raspberry Pi&rsquo;s screen (a <a href="https://www.waveshare.com/wiki/7inch_HDMI_LCD_(C)">Waveshare 7&quot; HDMI LCD</a>), but YMMV.</p>
<h2 id="configure-and-build-fbpad">Configure and build fbpad</h2>
<p>First, download fbpad:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#0086b3">cd</span> ~
git clone https://github.com/aligrudi/fbpad
<span style="color:#0086b3">cd</span> fbpad
</code></pre></div><p>Then, edit <code>conf.h</code> and change these two options:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#998;font-style:italic">// ...
</span><span style="color:#998;font-style:italic"></span>
<span style="color:#999;font-weight:bold;font-style:italic">#define TERM      &#34;xterm-256color&#34;
</span><span style="color:#999;font-weight:bold;font-style:italic">#define FR        &#34;/home/USERNAME/fira/fira.tf&#34;
</span><span style="color:#999;font-weight:bold;font-style:italic"></span>
<span style="color:#998;font-style:italic">// ...
</span></code></pre></div><p>Obviously, use your actual username. You can leave the rest unchanged.</p>
<p>Finally, compile fbpad:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">make
</code></pre></div><h2 id="running-textual-in-fbpad">Running Textual in fbpad</h2>
<p>First, grab a copy of Textual (here from source, using <a href="https://python-poetry.org">Poetry</a> â€“ installing in a venv should work as well):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#0086b3">cd</span> ~
git clone https://github.com/Textualize/textual.git
<span style="color:#0086b3">cd</span> textual
poetry install
</code></pre></div><p>We&rsquo;re finally ready to roll! Here is Textual color reference:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#008080">TERMCOLOR</span><span style="color:#000;font-weight:bold">=</span>truecolor ~/fbpad/fbpad poetry run textual colors
</code></pre></div><p>Note that <code>TERMCOLOR=truecolor</code> is required to have 256 colors, but it doesn&rsquo;t actually enable 24bit true color mode, which fbpad does not support.</p>
<p>Here is how it looks like in the Debian VM:</p>
<img src="/til-textual-fb-term/success-parallels.png"alt="`textual colors` running with fbpad on a Debian VM"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>The Textual demo can ben run with the following command:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#008080">TERMCOLOR</span><span style="color:#000;font-weight:bold">=</span>truecolor ~/fbpad/fbpad poetry run python -m textual
</code></pre></div><img src="/til-textual-fb-term/success-parallels-demo.png"alt="`python -m demo` running with fbpad on a Debian VM"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>Finally, here is a video of how it runs on the actual Raspberry Pi:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/9P-qb6ux4VI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="Textual running on a X11-less Raspberry Pi with a framebuffer terminal emulator"></iframe>
</div>

<br/>
<h2 id="final-words">Final words</h2>
<p>As I mentioned before, this approach has many limitations:</p>
<ul>
<li>It&rsquo;s obviously cumbersome to setup â€“ compiled configuration file anyone??</li>
<li>Hardly any of the framebuffer terminal emulators are active and well maintained projects.</li>
<li>None of them have mouse support â€“ let alone handle a touch-screen<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</li>
<li>The performance is bad, without an ounce of hardware acceleration.</li>
</ul>
<p>For my purposes, I&rsquo;ll likely move on to a bare-bone X11 setup without windows manager nor Desktop environment (basically <code>startx</code> + fullscreen <code>xterm</code>), since it addresses most of these limitations. Still, it was a fun niche to dig into! ðŸ¤“</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Extending Textual to support a touch-screen on Linux can be done with <a href="https://python-evdev.readthedocs.io"><code>python-evdev</code></a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: use Plausible.io with a Sphinx documentation hosted on RTD</title>
      <link>https://bylr.info/articles/2022/10/09/til-plausible-rtd/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/10/09/til-plausible-rtd/</guid>
      <description>Although Google Analytics is very easy to setup on a Read the Docs-based documentation website, it requires a cookie banner to be GDPR-compliant and is otherwise questionable from a privacy-preservation point-of-view. As a result, I much prefer to use and support the excellent EU-based Plausible.io for traffic metrics instead.
This article explains how to setup a Read the Docs-based documentation with Plausible.io such that metrics are enabled only on &amp;ldquo;production&amp;rdquo; builds â€” e.</description>
      <content:encoded><![CDATA[<p>Although Google Analytics is very easy to setup on a <a href="https://readthedocs.org"><em>Read the Docs</em></a>-based documentation website, it requires a cookie banner to be <a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation">GDPR</a>-compliant and is otherwise questionable from a privacy-preservation point-of-view. As a result, I much prefer to use and support the excellent EU-based <a href="https://plausible.io/">Plausible.io</a> for traffic metrics instead.</p>
<p>This article explains how to setup a <em>Read the Docs</em>-based documentation with Plausible.io such that metrics are enabled only on &ldquo;production&rdquo; builds â€” e.g. the &ldquo;latest&rdquo; builds from the main branch and the version-tagged builds. This minimises the contamination of traffic statistics by development-related activities.</p>
<p>To achieve this, the basic idea is to customise your Sphinx template such that the <a href="https://plausible.io/docs/plausible-script">Plausible.io script</a> is only included when a <code>conf.py</code>-defined flag is set to <code>True</code>. This flag is then set based on <a href="https://docs.readthedocs.io/en/stable/environment-variables.html">environment variables provided by <em>Read the Docs</em></a>.</p>
<p>Let&rsquo;s dive in the details a step at a time.</p>
<h2 id="enabling-templates">Enabling templates</h2>
<p>If you haven&rsquo;t done so already (for example to <a href="https://bylr.info/articles/2022/05/10/api-doc-with-sphinx-autoapi/">customise your API documentation</a>), create a <code>_templates</code> sub-directory and let Sphinx know that this is where custom templates are to be found:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># conf.py</span>

templates_path <span style="color:#000;font-weight:bold">=</span> [<span style="color:#d14">&#34;_templates&#34;</span>]
</code></pre></div><h2 id="customising-the-template">Customising the template</h2>
<p>Then, a custom template can be created to include the Plausible.io script. Create a <code>_templates/base.html</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#998;font-style:italic">&lt;!-- _templates/base.html --&gt;</span>
{% extends &#34;!base.html&#34; %}
{% block extrahead %}
    {% if enable_plausible %}
        &lt;<span style="color:#000080">script</span> <span style="color:#008080">defer</span> <span style="color:#008080">data-domain</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;myproject.readthedocs.io&#34;</span>
                <span style="color:#008080">src</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;https://plausible.io/js/script.js&#34;</span>&gt;&lt;/<span style="color:#000080">script</span>&gt;
    {% endif %}
    {{ super() }}
{% endblock %}
</code></pre></div><p>In <code>_templates/base.html</code>, replace <code>myproject.readthedocs.io</code> by the actual domain name of your documentation. This domain name must also be enabled in your Plausible.io account.</p>
<p>Note that the <code>&lt;script&gt;</code> tag is added <em>only</em> if the template variable <code>enable_plausible</code> evaluates to <code>True</code>. This is how we can control whether or not metrics should be enabled for a given build.</p>
<p><strong>Important</strong>: I&rsquo;m using the <a href="https://pradyunsg.me/furo/quickstart/">Furo</a> theme, which uses <code>base.html</code> as main HTML file. Other themes (including the default Sphinx theme) might be using <code>layout.html</code> instead, as indicated in <a href="https://www.sphinx-doc.org/en/master/templating.html">Sphinx&rsquo;s documentation</a> on templating. This initially threw me off, so make sure to check which of your template&rsquo;s file must be extended.</p>
<h2 id="enabling-metrics-on-production-build">Enabling metrics on production build</h2>
<p>The <code>enable_plausible</code> variable must be defined for our template above to function. This is done in <code>conf.py</code> file using the <code>html_context</code> variable as follows:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># conf.py</span>
<span style="color:#000;font-weight:bold">import</span> <span style="color:#555">os</span>

<span style="color:#998;font-style:italic"># [...]</span>

READTHEDOCS_VERSION_TYPE <span style="color:#000;font-weight:bold">=</span> os<span style="color:#000;font-weight:bold">.</span>environ<span style="color:#000;font-weight:bold">.</span>get(<span style="color:#d14">&#34;READTHEDOCS_VERSION_TYPE&#34;</span>, <span style="color:#000;font-weight:bold">None</span>)

html_context <span style="color:#000;font-weight:bold">=</span> {
    <span style="color:#d14">&#34;enable_plausible&#34;</span>: READTHEDOCS_VERSION_TYPE <span style="color:#000;font-weight:bold">in</span> [<span style="color:#d14">&#34;branch&#34;</span>, <span style="color:#d14">&#34;tag&#34;</span>],
}
</code></pre></div><p>I use the <code>READTHEDOCS_VERSION_TYPE</code> environment variable, which is <a href="https://docs.readthedocs.io/en/stable/environment-variables.html#envvar-READTHEDOCS_VERSION_TYPE">set by <em>Read the Docs</em></a>. Its value is <code>&quot;branch&quot;</code> when the docs are built from the main branch, and <code>&quot;tag&quot;</code> when they are built from a tagged release. We want <code>enable_plausible</code> to be set to <code>True</code> in those instances. In any other case, including when <code>READTHEDOCS_VERSION_TYPE</code> is undefined (as is the case for local builds), <code>enable_plausible</code> is set to <code>False</code>.</p>
<p>And that&rsquo;s about it â€“ these few steps are all it takes more compliant and privacy-friendly metrics thanks to <code>Plausible.io</code>. For a real-world example, you can check my <a href="https://vpype.readthedocs.io/en/latest/"><em>vpype</em></a> project (<a href="https://github.com/abey79/vpype/pull/546/files">relevant PR</a>).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: using Sphinx substitutions to generate text snippets from code</title>
      <link>https://bylr.info/articles/2022/09/30/til-sphinx-substitutions/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/09/30/til-sphinx-substitutions/</guid>
      <description>Often, technical documentations include lists or other snippets of text that are strongly related to some of the project&amp;rsquo;s code. vpype&amp;rsquo;s documentation is no exception to this.
For instance, the Built-in symbols section lists the units available to expressions:
These units are related to the following piece of code:
# vpype/utils.py UNITS = { &amp;#34;px&amp;#34;: 1.0, &amp;#34;in&amp;#34;: 96.0, &amp;#34;inch&amp;#34;: 96.0, &amp;#34;ft&amp;#34;: 12.0 * 96.0, &amp;#34;yd&amp;#34;: 36.0 * 96.0, &amp;#34;mi&amp;#34;: 1760.0 * 36.</description>
      <content:encoded><![CDATA[<p>Often, technical documentations include lists or other snippets of text that are strongly related to some of the project&rsquo;s code. <a href="https://github.com/abey79/vpype"><em>vpype</em></a>&rsquo;s <a href="https://vpype.readthedocs.io/">documentation</a> is no exception to this.</p>
<p>For instance, the <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#built-in-symbols">Built-in symbols</a> section lists the units available to expressions:</p>
<img src="/til-sphinx-substitutions/doc_units.png"alt="partial screenshot of vpype&#39;s documentation showing a list of units related to code"width="95%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>These units are related to the following piece of code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># vpype/utils.py</span>

UNITS <span style="color:#000;font-weight:bold">=</span> {
    <span style="color:#d14">&#34;px&#34;</span>: <span style="color:#099">1.0</span>,
    <span style="color:#d14">&#34;in&#34;</span>: <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;inch&#34;</span>: <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;ft&#34;</span>: <span style="color:#099">12.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;yd&#34;</span>: <span style="color:#099">36.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;mi&#34;</span>: <span style="color:#099">1760.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">36.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span>,
    <span style="color:#d14">&#34;mm&#34;</span>: <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">25.4</span>,
    <span style="color:#d14">&#34;cm&#34;</span>: <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">2.54</span>,
    <span style="color:#d14">&#34;m&#34;</span>: <span style="color:#099">100.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">2.54</span>,
    <span style="color:#d14">&#34;km&#34;</span>: <span style="color:#099">100_000.0</span> <span style="color:#000;font-weight:bold">*</span> <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">2.54</span>,
    <span style="color:#d14">&#34;pc&#34;</span>: <span style="color:#099">16.0</span>,
    <span style="color:#d14">&#34;pt&#34;</span>: <span style="color:#099">96.0</span> <span style="color:#000;font-weight:bold">/</span> <span style="color:#099">72.0</span>,
}
</code></pre></div><p>I recently added <a href="https://github.com/abey79/vpype/pull/541">support for more units</a> and, of course, the documentation was at risk of running out of sync. Obviously, generating the list of units based on the code would be a better solution. After some Googling, here is how I did it.</p>
<p>The basic idea is to use <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#substitutions">substitutions</a>. A substitution consists of assigning a text snippet to a keyword, and subsequently use said keyword (with the <code>|keyword|</code> syntax) in the documentation&rsquo;s body. The second insight is to use the <code>rst_prolog</code> variable (within the <code>conf.py</code> file) for the definition. This being regular Python, the definition can easily be auto-generated based on the original code.</p>
<p>Here is how it looks for the case above:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#998;font-style:italic"># docs/conf.py</span>

<span style="color:#000;font-weight:bold">import</span> <span style="color:#555">vpype</span> <span style="color:#000;font-weight:bold">as</span> <span style="color:#555">vp</span>

<span style="color:#998;font-style:italic"># [...]</span>

UNIT_STRINGS <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">&#34;, &#34;</span><span style="color:#000;font-weight:bold">.</span>join(<span style="color:#d14">f</span><span style="color:#d14">&#34;``</span><span style="color:#d14">{</span>s<span style="color:#d14">}</span><span style="color:#d14">``&#34;</span> <span style="color:#000;font-weight:bold">for</span> s <span style="color:#000;font-weight:bold">in</span> <span style="color:#0086b3">sorted</span>(vp<span style="color:#000;font-weight:bold">.</span>UNITS<span style="color:#000;font-weight:bold">.</span>keys()) <span style="color:#000;font-weight:bold">if</span> s <span style="color:#000;font-weight:bold">!=</span> <span style="color:#d14">&#34;in&#34;</span>)

rst_prolog <span style="color:#000;font-weight:bold">=</span> <span style="color:#d14">f</span><span style="color:#d14">&#34;&#34;&#34;
</span><span style="color:#d14">.. |units| replace:: </span><span style="color:#d14">{</span>UNIT_STRINGS<span style="color:#d14">}</span><span style="color:#d14">
</span><span style="color:#d14">&#34;&#34;&#34;</span>
</code></pre></div><p>(Note that <code>in</code> is explicitly excluded from the list because it is a reserved Python keyword and cannot be used in the context of <em>vpype</em> expressions.)</p>
<p>And this is how the substitution is used in the actual documentation file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rst" data-lang="rst"><span style="color:#999;font-weight:bold;font-style:italic">..
</span><span style="color:#999;font-weight:bold;font-style:italic">  docs/fundamentals.rst
</span><span style="color:#999;font-weight:bold;font-style:italic">
</span><span style="color:#999;font-weight:bold;font-style:italic"></span><span style="color:#099">*</span> Units constants (|units|).<span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span>  These variables may be used to convert values to CSS pixels unit, which <span style="color:#000;font-style:italic">*vpype*</span> uses internally. For example, the expression <span style="color:#d14">``%(3+4)*cm%``</span> evaluates to the pixel equivalent of 7 centimeters (e.g. ~264.6 pixels). (Note that expressions may overwrite these variables, e.g. to use the <span style="color:#d14">``m``</span> variable for another purpose.)<span style="color:#a61717;background-color:#e3d2d2">
</span></code></pre></div><p><em>Et voilÃ !</em> Nice and easy. I certainly expect to use this technique often in the future.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TIL: aligning horizontal or vertical lines to the pixel grid with OpenGL</title>
      <link>https://bylr.info/articles/2022/04/05/til-aligning-horizontal-or-vertical-lines-to-the-pixel-grid-with-opengl/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/04/05/til-aligning-horizontal-or-vertical-lines-to-the-pixel-grid-with-opengl/</guid>
      <description>When I started using my new M1 Max MacBook Pro in December, a bunch of vpype&amp;rsquo;s tests started to fail. The failing tests were all image-based: an image is rendered and then compared to a previously-generated, reference image. This process is made easy thanks to this Pytest fixture.
In this case, the reference images were generated long ago on my previous, Intel/AMD-based MacBook Pro. This GIF highlights the discrepancy I&amp;rsquo;d get with images generated on my new computer (notice how the ruler&amp;rsquo;s thickness varies):</description>
      <content:encoded><![CDATA[<p>When I started using my new M1 Max MacBook Pro in December, a bunch of <a href="https://github.com/abey79/vpype"><em>vpype</em></a>&rsquo;s tests started to fail. The failing tests were all image-based: an image is rendered and then compared to a previously-generated, reference image. This process is made easy thanks to <a href="https://github.com/abey79/vpype/blob/cd95e2da1940171e33ed0001255b763fa0d5f082/tests/conftest.py#L96">this Pytest fixture</a>.</p>
<p>In this case, the reference images were generated long ago on my previous, Intel/AMD-based MacBook Pro. This GIF highlights the discrepancy I&rsquo;d get with images generated on my new computer (notice how the ruler&rsquo;s thickness varies):</p>
<img src="/til-pixel-grid/m1_render.gif"alt="animated gif highlighting rendering discrepancy with horizontal and vertical lines"width="650px"style="display:block;margin-left:auto;margin-right:auto"/>
<p>As I&rsquo;m currently working on this viewer again, I finally spent two days tracking this issue â€“ and finally found its cause.</p>
<p>Without giving it a thought, I first used integer coordinates for those ruler lines. However, coordinates refer to pixel <em>boundaries</em> â€“ not pixel <em>centres</em>. This means than an horizontal line with integer coordinates (e.g. <code>[(2, 2), (7, 2)]</code>) sits halfway between two consecutive rows of pixel:</p>
<img src="/til-pixel-grid/pixel_grid.png"alt="schematic of a line not aligned with the pixel grid"width="500px"style="display:block;margin-left:auto;margin-right:auto"/>
<p>Which of the 2nd or 3rd row of pixel eventually gets drawn is up to a coin toss â€“ or rather the rounding strategy of your particular OpenGL driver/GPU/OS combination.</p>
<p>By offsetting the coordinates by half a pixel (e.g. <code>[(2, 2.5), (7, 2.5)]</code>), one can force the line on a specific pixel row and avoid any rounding:</p>
<img src="/til-pixel-grid/pixel_grid_aligned.png"alt="schematic of a line aligned with the pixel grid"width="500px"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This makes the rendering more predictable across platforms.</p>
<p>Ultimately, the fix was very simple (I just changed the ruler thickness from <code>20</code> to <code>19.5</code>), but figuring it out was tricky (<a href="https://ptb.discord.com/channels/550302843777712148/811289127609827358/960561872774500412">relevant discussions</a> on <a href="https://github.com/moderngl/moderngl">ModernGL</a>&rsquo;s Discord server). Hopefully I wont forget about it after writing this TIL.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
