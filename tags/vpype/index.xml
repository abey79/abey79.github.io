<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>vpype on bylr.info</title>
    <link>https://bylr.info/tags/vpype/</link>
    <description>Recent content in vpype on bylr.info</description>
    <image>
      <url>https://bylr.info/android-chrome-512x512.png</url>
      <link>https://bylr.info/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2022 Antoine Beyeler –</copyright>
    <lastBuildDate>Thu, 10 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bylr.info/tags/vpype/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Batch processing SVGs with DoIt and vpype</title>
      <link>https://bylr.info/articles/2022/11/10/batch-processing-doit-vpype/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/11/10/batch-processing-doit-vpype/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pydoit.org&#34;&gt;DoIt&lt;/a&gt; (a.k.a. PyDoIt) is a fantastic Python-based tool to automate repetitive workflows. It works particularly well alongside &lt;a href=&#34;https://vpype.readthedocs.io&#34;&gt;&lt;em&gt;vpype&lt;/em&gt;&lt;/a&gt; to address mundane plotting-related tasks. This article explains in details how to automate an SVG optimisation and conversion workflow.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://pydoit.org">DoIt</a> (a.k.a. PyDoIt) is a fantastic Python-based tool to automate repetitive workflows. It works particularly well alongside <a href="https://vpype.readthedocs.io"><em>vpype</em></a> to address mundane plotting-related tasks. This article explains in details how to automate an SVG optimisation and conversion workflow.</p>
<p>Most plotter workflows involve one or more repetitive steps which, when executed manually, take time, are boring, and possibly error-prone. Here are some examples that come to mind:</p>
<ul>
<li>Optimizing SVGs using <em>vpype</em>&rsquo;s <code>linemerge reloop linesort linesimplify</code> commands.</li>
<li>Converting SVGs into a format your plotter understands (e.g. HPGL, or G-code using <a href="https://github.com/plottertools/vpype-gcode">vpype-gcode</a>).</li>
<li>Splitting multi-layer SVGs into individual layers (e.g. if this is a requirement of your plotter for multi-colour plots).</li>
<li>Making a PNG version of SVGs for archival purposes.</li>
<li>Running the <code>axicli</code> command to plot an SVG with an <a href="https://axidraw.com">Axidraw</a>.</li>
<li>Uploading optimised files to the computer/server/Raspberry Pi in control of your plotter.</li>
<li>Etc.</li>
</ul>
<p>Not only your workflow may include one or more of these steps, but you may need to apply it on a single SVG at a time, or on a bunch of them at once. Even better, you might want to apply your workflow only on SVGs which were updated or created since the last execution.</p>
<p>You can do exactly that with DoIt&mdash;let&rsquo;s see how.</p>
<h2 id="installing-doit">Installing DoIt</h2>
<p>Although <a href="https://pydoit.org/install.html">its documentation</a> sadly doesn&rsquo;t mention it, <a href="https://pypa.github.io/pipx/">pipx</a> is the best way to install DoIt (as for <a href="https://vpype.readthedocs.io/en/latest/install.html"><em>vpype</em></a>):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ pipx install doit
</code></pre></div><p>You can check that the installation was successful by running this command:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit --version
0.36.0
lib @ /Users/&lt;username&gt;/.local/pipx/venvs/doit/lib/python3.10/site-packages/doit
</code></pre></div><h2 id="basics">Basics</h2>
<p>As a starting point, let&rsquo;s assume you have a bunch of SVGs which need optimising before plotting, stored in a <code>originals</code> subdirectory. Save the optimisation commands in a <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#command-files">VPY file</a> named <code>optimize.vpy</code>, with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl">linemerge reloop linesort linesimplify
</code></pre></div><p>Then, create a subdirectory named <code>processed</code>, which will contain the optimised SVGs:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir processed 
</code></pre></div><p>Here is how your file hierarchy should look like:</p>
<pre tabindex="0"><code>.
├── optimize.vpy
├── originals/
│   ├── dots.svg
│   ├── halftone.svg
│   └── hline.svg
└── processed/
</code></pre><p>Our goal is to have DoIt automate the optimisation of the source SVGs in <code>originals</code>, and store the result in <code>processed</code>.</p>
<p>DoIt operates by loading a description of the task(s) it must execute, typically in a file named <code>dodo.py</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. As the name suggests, the content of this file is Python code.</p>
<p>Create a <code>dodo.py</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>                                                            <span style="color:#998;font-style:italic"># (1)</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent                                       <span style="color:#998;font-style:italic"># (2)</span>
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))                         <span style="color:#998;font-style:italic"># (3)</span>
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>                                                <span style="color:#998;font-style:italic"># (4)</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():                                                      <span style="color:#998;font-style:italic"># (5)</span>
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>                                                   <span style="color:#998;font-style:italic"># (6)</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:                                                <span style="color:#998;font-style:italic"># (7)</span>
        optimized <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)  <span style="color:#998;font-style:italic"># (8)</span>
        <span style="color:#000;font-weight:bold">yield</span> {                                                           <span style="color:#998;font-style:italic"># (9)</span>
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,                                          <span style="color:#998;font-style:italic"># (10)</span>
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>   <span style="color:#998;font-style:italic"># (11)</span>
            ],
        }
</code></pre></div><p>Let&rsquo;s examine this code line-by-line.</p>
<ol>
<li>The <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib</code></a> built-in module is great at file wrangling. Check <a href="https://realpython.com/python-pathlib/">this Real Python article</a> for a gentle yet thorough introduction.</li>
<li>Here we use it to find our project directory, which is the parent of the present file, whose path is stored in the <code>__file__</code> variable by the Python interpreter.</li>
<li>We list all the SVGs contained in the <code>originals</code> subdirectory, and store them in the <code>SOURCES</code> variable. Note that <code>glob()</code> returns a generator, which must be converted to a <code>list</code> if <code>SOURCES</code> is to be iterated multiple times.</li>
<li>We keep the path to the <code>optimize.vpy</code> file in the <code>VPY</code> variable.</li>
<li>Python functions with name starting with <code>task_</code> are interpreted by DoIt as <a href="https://pydoit.org/tasks.html">tasks</a>. Here we have just one. Let&rsquo;s call it &ldquo;optimize&rdquo;, thus the <code>task_optimize()</code> function name.</li>
<li>The function&rsquo;s <a href="https://peps.python.org/pep-0257/">docstring</a> is used by DoIt as help string for the task, so it is useful to include one.</li>
<li>Task functions must return one or more Python dictionaries describing the task. In our case, we want to create one <a href="https://pydoit.org/tasks.html#sub-tasks">sub-tasks</a> per source SVG file.</li>
<li>For each source SVG, we derive the path for the corresponding optimised SVG. The optimised SVG are located in the <code>processed</code> subdirectory and have a <code>_optimized.svg</code> suffix to their name.</li>
<li>Using <a href="https://docs.python.org/3/reference/expressions.html#yieldexpr"><code>yield</code></a> keyword (instead of <code>return</code>) makes our function a <a href="https://docs.python.org/3/glossary.html#term-generator">generator</a> (gentle introduction available <a href="https://realpython.com/introduction-to-python-generators/">here</a>). This is a convenient way to return (er&hellip; yield) multiple objects, which is supported by DoIt. Here, we yield one dictionary per sub-task.</li>
<li>Sub-tasks must be individually named so that they can be distinguished. Here we derive the sub-task name from the source SVG filename. For example, the sub-task corresponding to <code>my_file.svg</code> will be named <code>my_file</code>, and can be referred to with DoIt as <code>optimize:my_file</code>.</li>
<li>Last but not least, the <code>&quot;actions&quot;</code> entry of the sub-task dictionary lists the actions to be performed by the task. DoIt interprets strings as shell commands, so we build a <em>vpype</em> pipeline to optimise the source SVG using our VPY and saving the result in the desired location. For example, for <code>my_file.svg</code>, the action will be <code>vpype read originals/my_file.svg -I optimize.vpy write processed/my_file_optimized.svg</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</li>
</ol>
<p>Let&rsquo;s take a step back to properly understand what&rsquo;s going on.</p>
<p>The function <code>task_optimize()</code> produces a task <em>description</em>&mdash;it does not actually <em>run</em> the task. When we run DoIt (using the <code>doit</code> command), it loads the <code>dodo.py</code> file, notices that it contains a task function, and calls it to learn about that task. It&rsquo;s only <em>then</em> that it can decide which action(s) to actually execute, based on the task description. In this case, the actions are the <em>vpype</em> pipelines stored in the <code>&quot;actions&quot;</code> entries.</p>
<p>Although this <code>dodo.py</code> file is not overly complicated, it can still feel like quite some work compared to, you know, just calling <em>vpype</em> manually. I certainly felt so when first using DoIt. So let&rsquo;s see what we gained by going through this effort.</p>
<p>First and foremost, we now have a potent batch processing system. We can optimise all of our source SVGs by telling DoIt to execute the <code>optimize</code> task:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit optimize
.  optimize:dots
.  optimize:halftone
.  optimize:hline
</code></pre></div><p>Here is the result after running this command:</p>
<pre tabindex="0"><code>.
├── dodo.py
├── optimize.vpy
├── originals/
│   ├── dots.svg
│   ├── halftone.svg
│   └── hline.svg
└── processed/
    ├── dots_optimized.svg
    ├── halftone_optimized.svg
    └── hline_optimized.svg
</code></pre><p>DoIt indeed created properly-named, optimised versions of the source SVGs in the <code>processed</code> directory! 🎉</p>
<p>Since we only have just one task defined, we don&rsquo;t even need to specify its name:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit
.  optimize:dots
.  optimize:halftone
.  optimize:hline
</code></pre></div><p>You can also specify a specific sub-task to execute:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit optimize:halftone
.  optimize:halftone
</code></pre></div><p>Pretty neat already&mdash;but there is a lot more to gain with a little more effort!</p>
<h2 id="handling-targets-and-dependencies">Handling targets and dependencies</h2>
<p>Playing with the commands above, you may notice that each call of the <code>optimize</code> task triggers the processing of the corresponding SVGs&mdash;even if said SVGs were already processed before. The reason for this is that DoIt doesn&rsquo;t yet know what the task inputs and outputs are, so it cannot check whether that output exists or is outdated. So, to be on the safe side, it <em>always</em> executes <em>all specified tasks</em> every time.</p>
<p>By letting DoIt know about tasks' inputs and outputs, DoIt can be much smarter about what it actually needs to do.</p>
<p>In DoIt parlance, the file(s) a task uses as input are called <em>dependencies</em> (<code>&quot;file_dep&quot;</code> entry). Likewise, the file(s) created as output are called <em>targets</em> (<code>&quot;targets&quot;</code> entry). By specifying what these are in the <code>dodo.py</code> file, DoIt can decide whether the target of a given task needs to be generated or not, saving a lot of time when repeating the workflow.</p>
<p>Update the <code>dodo.py</code> file as follows:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        optimized <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;targets&#34;</span>: [optimized],         <span style="color:#998;font-style:italic"># (1)</span>
            <span style="color:#d14">&#34;file_dep&#34;</span>: [source, VPY],      <span style="color:#998;font-style:italic"># (2)</span>
        }
</code></pre></div><ol>
<li>The <code>&quot;targets&quot;</code> entry is a list of all the files generated by the sub-task. In our case, there is only one, whose path is stored in the <code>optimized</code> variable.</li>
<li>The <code>&quot;file_dep&quot;</code> entry is a list of all the files the sub-task depends on. In our case, both the source SVG and the VPY file are involved to create an optimised SVG, so we list them both.</li>
</ol>
<p>It would be easy to forget the VPY file in the <code>&quot;file_dep&quot;</code> entry. That would be a mistake. All the optimised SVGs should be regenerated when the VPY file is modified. For DoIt to realise this, we must list the VPY file as a dependency.</p>
<p>With the modification above, DoIt now knows when to run optimisation sub-tasks and when they can be skipped.</p>
<p>Let&rsquo;s experiment with a clean slate by deleting all the processed files:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ rm processed/*.svg
</code></pre></div><p>DoIt must now execute all sub-tasks:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit
.  optimize:dots
.  optimize:halftone
.  optimize:hline
</code></pre></div><p>Notice the dot (<code>.</code>) prefixing each line and how the execution is relatively slow.</p>
<p>Now, this is what happens if we run DoIt again:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit
-- optimize:dots
-- optimize:halftone
-- optimize:hline
</code></pre></div><p>Execution time is now much faster and each line is now prefixed with <code>--</code>, indicating that DoIt skipped the corresponding sub-task.</p>
<p>Let&rsquo;s see what happens if one of the source file is modified.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ <span style="color:#0086b3">echo</span> <span style="color:#d14">&#34; &#34;</span> &gt;&gt; originals/halftone.svg
$ doit
-- optimize:dots
.  optimize:halftone
-- optimize:hline
</code></pre></div><p>We first append a single space to the <code>halftone.svg</code> (which is harmless on a valid SVG) to simulate a change<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. As expected, DoIt rebuilds the of <code>halftone.svg</code> without running the other tasks! 🎉</p>
<p>We now have a setup able to automatically process large batches of files and be smart about if/when any sub-task must be repeated. You have a thousand SVGs to process? It&rsquo;s coffee time while the CPUs churn through them<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. You add just one to the list? Instant results, thanks to DoIt!</p>
<h2 id="cleaning-up">Cleaning up</h2>
<p>The files created by the <code>optimize</code> task can be considered &ldquo;temporary&rdquo;. When missing, they are automatically recreated by DoIt, and are overwritten by a new version when the input file (or the VPY file) change. In that sense, they matter much less than the source SVGs and the <code>dodo.py</code> file, which collectively form the &ldquo;recipe&rdquo; to build the optimised SVGs<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<p>The ability to delete these files may occasionally be useful. For example, to force a complete rebuild of the optimised files, to make an archive with only the true source files, or simply to free some disk space.</p>
<p>DoIt provides this feature with a single modification to the <code>dodo.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        optimized <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;targets&#34;</span>: [optimized],
            <span style="color:#d14">&#34;file_dep&#34;</span>: [source, VPY],
            <span style="color:#d14">&#34;clean&#34;</span>: <span style="color:#000;font-weight:bold">True</span>,                  <span style="color:#998;font-style:italic"># (1)</span>
        }
</code></pre></div><ol>
<li>Tell DoIt that target files should be deleted when running <code>doit clean</code>.</li>
</ol>
<p>Let&rsquo;s see this in action:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit clean
optimize:hline - removing file <span style="color:#d14">&#39;.../processed/hline_optimized.svg&#39;</span>
optimize:halftone - removing file <span style="color:#d14">&#39;.../processed/halftone_optimized.svg&#39;</span>
optimize:dots - removing file <span style="color:#d14">&#39;.../processed/dots_optimized.svg&#39;</span>
</code></pre></div><p>Works as expected! 🎉</p>
<h2 id="multiple-tasks">Multiple tasks</h2>
<p>Although DoIt already shines dealing with a single task, it reveals its true power when multiple tasks are involved&mdash;even more so when they depend on each other.</p>
<p>For the illustration purposes, let&rsquo;s imagine that we need to convert the optimised SVGs to HPGL, so that we may plot them on a shiny &lsquo;83 <a href="http://www.hpmuseum.net/display_item.php?hw=74">HP 7475a</a>. We&rsquo;ll add a second task for this<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>.</p>
<p>First, let&rsquo;s start by creating a new <code>hpgl</code> subdirectory to store the HPGL files:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir hpgl
</code></pre></div><p>Since we cleaned the optimised SVGs in the previous steps, this how your project directory should look:</p>
<pre tabindex="0"><code>.
├── dodo.py
├── hpgl/
├── optimize.vpy
├── originals/
│   ├── dots.svg
│   ├── halftone.svg
│   └── hline.svg
└── processed/
</code></pre><p>Now, update the <code>dodo.py</code> file with the following content:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">import</span> <span style="color:#555">pathlib</span>

DIR <span style="color:#000;font-weight:bold">=</span> pathlib<span style="color:#000;font-weight:bold">.</span>Path(__file__)<span style="color:#000;font-weight:bold">.</span>parent
SOURCES <span style="color:#000;font-weight:bold">=</span> <span style="color:#0086b3">list</span>((DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;originals&#34;</span>)<span style="color:#000;font-weight:bold">.</span>glob(<span style="color:#d14">&#34;*.svg&#34;</span>))
VPY <span style="color:#000;font-weight:bold">=</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;optimize.vpy&#34;</span>

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">optimized_path</span>(source: pathlib<span style="color:#000;font-weight:bold">.</span>Path):                              <span style="color:#998;font-style:italic"># (1)</span>
    <span style="color:#d14">&#34;&#34;&#34;derive optimized path from source path&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">return</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;processed&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;_optimized.svg&#34;</span>)

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">hpgl_path</span>(source: pathlib<span style="color:#000;font-weight:bold">.</span>Path):                                   <span style="color:#998;font-style:italic"># (2)</span>
    <span style="color:#d14">&#34;&#34;&#34;derive HPGL path from source path&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">return</span> DIR <span style="color:#000;font-weight:bold">/</span> <span style="color:#d14">&#34;hpgl&#34;</span> <span style="color:#000;font-weight:bold">/</span> (source<span style="color:#000;font-weight:bold">.</span>stem <span style="color:#000;font-weight:bold">+</span> <span style="color:#d14">&#34;.hpgl&#34;</span>)

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_optimize</span>():
    <span style="color:#d14">&#34;&#34;&#34;optimize SVGs&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        optimized <span style="color:#000;font-weight:bold">=</span> optimized_path(source)                             <span style="color:#998;font-style:italic"># (3)</span>
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14">&#39; -I &#39;</span><span style="color:#d14">{</span>VPY<span style="color:#d14">}</span><span style="color:#d14">&#39; write &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;file_dep&#34;</span>: [source, VPY],
            <span style="color:#d14">&#34;targets&#34;</span>: [optimized],
            <span style="color:#d14">&#34;clean&#34;</span>: <span style="color:#000;font-weight:bold">True</span>,
        }

<span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_hpgl</span>():
    <span style="color:#d14">&#34;&#34;&#34;convert to HPGL&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:                                             <span style="color:#998;font-style:italic"># (4)</span>
        optimized <span style="color:#000;font-weight:bold">=</span> optimized_path(source)                             <span style="color:#998;font-style:italic"># (5)</span>
        hpgl <span style="color:#000;font-weight:bold">=</span> hpgl_path(source)
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [
                <span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read &#39;</span><span style="color:#d14">{</span>optimized<span style="color:#d14">}</span><span style="color:#d14">&#39; write -d hp7475a -p a4 -q -c &#39;</span><span style="color:#d14">{</span>hpgl<span style="color:#d14">}</span><span style="color:#d14">&#39;&#34;</span>
            ],
            <span style="color:#d14">&#34;file_dep&#34;</span>: [optimized],                                   <span style="color:#998;font-style:italic"># (6)</span>
            <span style="color:#d14">&#34;targets&#34;</span>: [hpgl],                                         <span style="color:#998;font-style:italic"># (7)</span>
            <span style="color:#d14">&#34;clean&#34;</span>: <span style="color:#000;font-weight:bold">True</span>,
        }
</code></pre></div><p>Let&rsquo;s examine the changes one-by-one.</p>
<ol>
<li>To clean things up and avoid code duplication, we factored in <code>optimized_path()</code> the code to derive the path of an optimised SVG from a source SVG.</li>
<li>We do the same to derive the path of an HPGL output from a source SVG in the <code>hpgl_path()</code> function. Note that neither of these function names start with <code>task_</code>, so they aren&rsquo;t interpreted as tasks by DoIt.</li>
<li>The only change to the <code>optimize</code> task is to use the <code>optimized_path()</code> helper function.</li>
<li>This part is interesting. The purpose of the <code>hpgl</code> task is to convert optimised SVG into HPGL files, yet we iterate over the <em>source</em> SVGs instead. The reason is, for our purposes, <code>SOURCES</code> is our master &ldquo;TODO list&rdquo;. Everything the <code>hpgl</code> task must do is indirectly due to the presence of source SVGs.</li>
<li>The source path is used <em>only</em> to derive the paths for the optimised SVG as well as the HPGL output. In particular, notice how <code>source</code> is not used anywhere in the return dictionaries.</li>
<li>The optimised SVGs is now a dependency (as opposed to a target in the <code>optimize</code> task).</li>
<li>Instead, the target is the HPGL file.</li>
</ol>
<p>These two tasks collectively form a &ldquo;pipeline&rdquo;. The output (or <em>target</em>) of the first task corresponds to the input (or <em>dependency</em>) of the second. DoIt understands that thanks to the <code>&quot;file_dep&quot;</code> and <code>&quot;targets&quot;</code> entries being properly populated&mdash;and can now be smart about it!</p>
<p>Let&rsquo;s take it for a spin by executing the <code>hpgl</code> task:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit hpgl
.  optimize:dots
.  optimize:halftone
.  optimize:hline
.  hpgl:dots
.  hpgl:halftone
.  hpgl:hline
</code></pre></div><p>DoIt knows that it needs optimised SVGs to create HPGL file, so it automatically executes the <code>optimize</code> task.</p>
<p>Let&rsquo;s remove a single HPGL file to test what happens. This can be done using the <code>doit clean</code> command:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit clean hpgl:hline
hpgl:hline - removing file <span style="color:#d14">&#39;.../hpgl/hline.hpgl&#39;</span>
</code></pre></div><p>This is what happens when we run the <code>hpgl</code> task again:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit hpgl
-- optimize:dots
-- optimize:halftone
-- optimize:hline
-- hpgl:dots
-- hpgl:halftone
.  hpgl:hline
</code></pre></div><p>The optimised version of <code>hline.svg</code> is still present and up-to-date, so the corresponding task is skipped. Only the HPGL conversion is executed.</p>
<p>Now, let&rsquo;s change one of the source files, like we did earlier:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ <span style="color:#0086b3">echo</span> <span style="color:#d14">&#34; &#34;</span> &gt;&gt; originals/dots.svg  
$ doit hpgl
.  optimize:dots
-- optimize:halftone
-- optimize:hline
.  hpgl:dots
-- hpgl:halftone
-- hpgl:hline
</code></pre></div><p>DoIt correctly runs both the <code>optimize</code> and <code>hpgl</code> sub-tasks for the corresponding file! 🎉</p>
<h2 id="helper-tasks">Helper tasks</h2>
<p>Tasks don&rsquo;t <em>have</em> to be part of an intricate pipeline with carefully specified targets and dependencies. They can also be just a nice little helper that encapsulate a useful shell command.</p>
<p>Consider for example this task, which can readily be added to our <code>dodo.py</code> file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">def</span> <span style="color:#900;font-weight:bold">task_show</span>():
    <span style="color:#d14">&#34;&#34;&#34;display SVG&#34;&#34;&#34;</span>
    <span style="color:#000;font-weight:bold">for</span> source <span style="color:#000;font-weight:bold">in</span> SOURCES:
        <span style="color:#000;font-weight:bold">yield</span> {
            <span style="color:#d14">&#34;name&#34;</span>: source<span style="color:#000;font-weight:bold">.</span>stem,
            <span style="color:#d14">&#34;actions&#34;</span>: [<span style="color:#d14">f</span><span style="color:#d14">&#34;vpype read </span><span style="color:#d14">{</span>source<span style="color:#d14">}</span><span style="color:#d14"> show&#34;</span>],
        }
</code></pre></div><p>Its action consist of loading the source SVG and displaying it with <em>vpype</em>. This isn&rsquo;t necessarily part of your workflow, but is convenient to have handy:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ doit show:dots
</code></pre></div><p>The corresponding SVG is displayed by the <em>vpype</em> viewer:</p>
<img src="/batch-processing-doit-vpype/dots.png"alt="*vpype* viewer display a SVGs containing many dots arranged in a circle"width="80%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>This example is taken from <a href="https://github.com/abey79/vpype-perspective"><em>vpype-perspective</em></a>, where all the README&rsquo;s figures are made from VPYs files stored in the repository&rsquo;s <a href="https://github.com/abey79/vpype-perspective/tree/main/examples/figures"><code>examples/figures</code></a> subdirectory. The conversion of these VPYs into SVGs is handled by DoIt using this <a href="https://github.com/abey79/vpype-perspective/blob/main/examples/dodo.py"><code>dodo.py</code></a> file. It&rsquo;s a nice example of what can be done with DoIt.</p>
<h2 id="final-words">Final words</h2>
<p>If you made it that far, I hope you are convinced of how useful DoIt is for workflow automation.</p>
<p>In this article, I focused on <em>vpype</em>, but DoIt can be used for entirely different things. As a matter of fact, I used it to automate my <a href="https://twitter.com/abey79/status/1528735353741484033">#plotloop machine</a>, which I&rsquo;ll describe in an upcoming article.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/px_mVzLROOY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="#plotloop automatic machine"></iframe>
</div>

<br/>
<p>One of DoIt drawbacks is the fact that its <code>dodo.py</code> file is written in Python. Creating one requires at least <em>some</em> Python basics&mdash;or willingness to acquire them. This might put off people uninterested by code.</p>
<p>But this is also its greatest strength. You wield the full power of Python when writing your <code>dodo.py</code> file, without any of the constraints of configuration languages such as <a href="https://yaml.org">YAML</a> or <a href="https://toml.io/en/">TOML</a>. This extends the possibilities <em>much</em> further than what was covered here, and makes learning DoIt a great investment! 🎯</p>
<p>Ready to take the plunge? I&rsquo;m happy to help&mdash;just share details of your workflow in the comments 👇, on <a href="https://twitter.com/abey79">Twitter</a>/<a href="https://mastodon.social/@abey79">Mastodon</a>, or on the <a href="https://discord.com/invite/XHP3dBg">Drawingbots Discord</a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The file may also have a different name, or be located elsewhere, but then its path should be provided to <code>doit</code>. Using <code>dodo.py</code> is simpler because this file is automatically detected and loaded by DoIt.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>The code actually generates full paths.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>If you are used to <code>make</code> and similar systems, you might be tempted to <code>touch originals/halftone.svg</code> to trigger a rebuild instead of modifying the file&rsquo;s content. This doesn&rsquo;t work with DoIt as it uses a local database and file hashes instead of modification date to track dependencies.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>By the way, you can parallelise the processing of large batches using <code>doit -n 8 optimize</code>, where <code>8</code> is the number of CPU cores to use.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>This bears strong similarities with software build systems, where compiled object files are created from source code by the compiler. As a matter of fact, DoIt can serve as a build system.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>This example is slightly over-engineered. <em>vpype</em> can optimise and export to HPGL in one command, so technically a single DoIt task is needed. Even if multiple commands were required (<em>vpype</em> or otherwise), they can all be listed in a single DoIt task&mdash;the <code>&quot;actions&quot;</code> entry is a list which can contain multiple items. It is still a relevant illustration for the many instances were multiple DoIt tasks are indeed useful.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></content:encoded>
    </item>
    
    <item>
      <title>Annotated Release Notes: vpype 1.12</title>
      <link>https://bylr.info/articles/2022/10/25/annotated-release-notes-vpype-1.12/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/10/25/annotated-release-notes-vpype-1.12/</guid>
      <description>&lt;p&gt;&lt;em&gt;vpype&lt;/em&gt; 1.12 is out! 🎉&lt;/p&gt;
&lt;p&gt;No ground-breaking features, but an improved &amp;ldquo;quality-of-life&amp;rdquo;, especially for Apple-silicon Mac owners, and few other goodies.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><em>vpype</em> 1.12 is out! 🎉</p>
<p>No ground-breaking features, but an improved &ldquo;quality-of-life&rdquo;, especially for Apple-silicon Mac owners, and few other goodies.</p>
<p>Let&rsquo;s dive in.</p>
<h2 id="migration-to-pyside6">Migration to PySide6</h2>

<blockquote class="extract">
  <p><ul>
<li>Migrated to PySide6 (from PySide2), which simplifies installation on Apple silicon Macs (#552, #559, #567)</li>
</ul>
</p>
</blockquote>

<p>PySide2 is the official Python wrapper for <a href="https://doc.qt.io/qt-5/">Qt 5</a>, the GUI toolkit I use for the viewer. As Qt 5 doesn&rsquo;t officially support Apple-silicon Macs, PySide2 – and thus <em>vpype</em> until now – were notoriously difficult to install on these computers. This is resolved with the transition to PySide6, which wraps <a href="https://www.qt.io/product/qt6">Qt 6</a> and officially supports Apple-silicon Macs.</p>
<p>This took me waaaay too long. I actually feel bad for <a href="https://github.com/abey79/vpype/issues/320">the struggle</a> incurred to <em>vpype</em> users 😅 All things considered, the migration wasn&rsquo;t that complicated, but there were still <a href="https://github.com/abey79/vpype/pull/552">a few pitfalls</a> to figure out due to Qt 6 breaking changes around the OpenGL-based widget.</p>
<p>Migrating to PySide6 is also a major step towards supporting Python 3.11, which brings a <a href="https://docs.python.org/3.11/whatsnew/3.11.html">host of novelties</a> as well as a significant performance bumps. I&rsquo;m hoping this will happen by the next release, which means <em>vpype</em> 1.12 might well be the last to support Python 3.8.</p>
<h2 id="other-fixes-and-improvements">Other fixes and improvements</h2>

<blockquote class="extract">
  <p><ul>
<li>The <code>layout</code> command now properly handles the <code>tight</code> special case by fitting the page size around the existing geometries, accommodating for a margin if provided (#556)</li>
<li>Fixed a viewer issue where page width/height of 0 would lead to errors and a blank display (#555)</li>
</ul>
</p>
</blockquote>

<p>Using <code>layout tight</code> would formerly set the page size to 0 by 0, which is useless in itself and caused a blank display. Not only the blanking issue has been resolved, but <code>layout tight</code> is now actually useful. It sets the page size to fit exactly the current geometries, accounting for a margin if <code>--fit-to-margin MARGIN</code> is provided.</p>

<blockquote class="extract">
  <p><ul>
<li>Added <code>inch</code> unit as a synonym to <code>in</code>, useful for expressions (in which <code>in</code> is a reserved keyword) (#541)</li>
</ul>
</p>
</blockquote>

<p>This addresses an oversight introduced with expressions in <a href="/articles/2022/03/03/annotated-release-notes-vpype-1.9/"><em>vpype</em> 1.9</a>. The units available for length CLI options are also available as scaling factor in expressions. For example, this creates a 10x15 cm rectangle:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">vpype rect <span style="color:#099">0</span> <span style="color:#099">0</span> 10cm <span style="color:#d14">&#39;%15*cm%&#39;</span> show
</code></pre></div><p>The expression works because the <code>cm</code> variable is made available by the interpreter, and set to the conversion factor between centimetres and pixels. This would however break for inches, because <code>in</code> is a <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords">reserved keyword</a> in Python. The variable <code>inch</code> is now available instead. Either form can be used in CLI options, but <code>inch</code> must be used in expressions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">vpype circle 5in 5inch <span style="color:#d14">&#39;%3*inch%&#39;</span> show
</code></pre></div>
<blockquote class="extract">
  <p><ul>
<li>Fixed a viewer issue where fitting the view to the document would not adjust when page size changes (<em>vsketch</em> only) (#564)</li>
</ul>
</p>
</blockquote>

<p>This change doesn&rsquo;t directly benefits <em>vpype</em> as the page size cannot change while the viewer is active. In <em>vsketch</em>, however, the sketch code is free to set/change the page size based on GUI parameters, like in the included <code>quick_draw</code> example. In this case, when the view is fitted to the page size (i.e. as long as you don&rsquo;t zoom or scroll), the view will adjust when the page size changes.</p>

<blockquote class="extract">
  <p><ul>
<li>Updated <a href="https://github.com/meerk40t/svgelements">svgelements</a> to 1.8.4, which fixes issue with some SVG constructs used by Matplotlib exports (#549)</li>
</ul>
</p>
</blockquote>

<p>Supporting all of the SVG standard subtleties is <em>hard</em>. Not only <a href="https://github.com/meerk40t/svgelements">svgelements</a> does a great job at it, but <a href="https://github.com/tatarize">@tatarize</a>&rsquo;s reactivity when edge cases appear is unmatched. In this instance, <a href="https://drawingbots.net">Drawingbots</a>' Discord user <em>apur</em> wanted to plot <a href="https://matplotlib.org">Matplotlib</a>-generated SVGs of <a href="https://www.latex-project.org">LaTeX</a> equations. They included unusual <code>&lt;use&gt;</code> elements, which didn&rsquo;t import properly. This is now fixed and I eagerly await the next niche corner case! 🤗</p>

<blockquote class="extract">
  <p><ul>
<li>Migrated to <a href="https://plausible.io">Plausible.io</a> (from Google Analytics) for <a href="https://vpype.readthedocs.io">vpype.readthedocs.io</a> (#546)</li>
</ul>
</p>
</blockquote>

<p><a href="https://plausible.io">Plausible</a> is a privacy-focused, <a href="https://gdpr-info.eu">GDPR</a>-compliant web statistics service. As I did for this site, I migrated from Google Analytics with my projects' documentation web sites. This is a paid service, so that neither your or I are the product.</p>
<h2 id="mystery-changes">Mystery changes</h2>

<blockquote class="extract">
  <p><ul>
<li>Added new units (<code>yd</code>, <code>mi</code>, and <code>km</code>) (#541)</li>
<li>Added <code>vpype.format_length()</code> to convert pixel length into human-readable string with units (#541)</li>
</ul>
</p>
</blockquote>

<p>Yes, <em>vpype</em> supports kilometer-scale plots!<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Seriously though, these changes are part of the WIP improvements of <em>vpype</em>&rsquo;s terminal output. This will happen in future versions, but for some reason it was easier to integrate those change early.</p>
<h2 id="developer-related-changes">Developer-related changes</h2>

<blockquote class="extract">
  <p><ul>
<li><a href="https://python-poetry.org">Poetry</a> 1.2 or later is not required (developer only) (#541)</li>
<li>A <code>justfile</code> is now provided for most common operations (install, build the documentation, etc.) (#541)</li>
</ul>
</p>
</blockquote>

<p>Shoutout to these two great dev tools: <a href="https://python-poetry.org">Poetry</a> (Python dependency management) and <a href="https://just.systems">just</a> (<a href="https://www.gnu.org/software/make/">make</a> replacement for useful commands). I use them on a daily basis!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>plotter not included&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></content:encoded>
    </item>
    
    <item>
      <title>Annotated Release Notes: vpype 1.11</title>
      <link>https://bylr.info/articles/2022/07/06/annotated-release-notes-vpype-1.11/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/07/06/annotated-release-notes-vpype-1.11/</guid>
      <description>This release further solidifies the block commands which were overhauled in vpype 1.9. It also introduces several changes revolving around the &amp;ldquo;plotting with paint&amp;rdquo; use-case, which typically requires the brush to be regularly dipped in a paint well. This can be achieved by inserting &amp;ldquo;dipping&amp;rdquo; patterns at regular intervals determined by the cumulative drawing distance. vpype 1.11 makes this process much easier.
Thanks a lot to Andee Collard for his useful feedback and providing this article&amp;rsquo;s banner!</description>
      <content:encoded><![CDATA[<p>This release further solidifies the block commands which were overhauled in <a href="/articles/2022/03/03/annotated-release-notes-vpype-1.9/"><em>vpype</em> 1.9</a>. It also introduces several changes revolving around the &ldquo;plotting with paint&rdquo; use-case, which typically requires the brush to be regularly dipped in a paint well. This can be achieved by inserting &ldquo;dipping&rdquo; patterns at regular intervals determined by the cumulative drawing distance. <em>vpype</em> 1.11 makes this process much easier.</p>
<p>Thanks a lot to <a href="https://www.andeecollard.com/">Andee Collard</a> for his useful feedback and providing this article&rsquo;s banner!</p>
<h2 id="painting-with-a-plotter">Painting with a plotter</h2>

<blockquote class="extract">
  <p><ul>
<li>Added the <code>splitdist</code> command to split layers by drawing distance (thanks to @LoicGoulefert) (#487, #501)</li>
</ul>
</p>
</blockquote>

<p>The new <a href="https://vpype.readthedocs.io/en/latest/reference.html#splitdist"><code>splitdist</code></a> command, contributed by <a href="https://compotedeplot.bigcartel.com">Loïc Goulefert</a> (thanks a lot!), is the core of the paint plotting use-case. It splits each layer into newly created layers such that their respective drawing distance is each below the specified limit.</p>
<p>This command could readily be used with a clever <a href="https://github.com/plottertools/vpype-gcode">vpype-gcode</a> profile that implements the dipping mechanism at the beginning of each layer. Alternatively, it can be combined with the <code>forlayer</code> block command to insert dipping patterns into the line work. We&rsquo;ll see an example of such a pipeline below.</p>

<blockquote class="extract">
  <p><ul>
<li>Added meters (<code>m</code>) and feet (<code>ft</code>) to the supported units (#498, #508)</li>
<li>Fixed an issue with expressions where some variable names corresponding to units (e.g. <code>m</code>) could not be used (expressions may now reuse these names) (#506)</li>
</ul>
</p>
</blockquote>

<p>These are rather large units for typical plotting workflow, but come in useful for specifying the maximum drawing distance with <code>splitdist</code>.</p>
<p>As a reminder, units are available in two contexts:</p>
<ol>
<li>Every time a command accepts a length-type argument or option (e.g. <code>translate 5mm 3cm</code> or <code>linemerge --tolerance 0.05mm</code>).</li>
<li>In <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#built-in-symbols">expressions</a> (e.g. <code>forlayer translate &quot;%_i*3*cm%&quot; 0 end</code>).</li>
</ol>
<p>In the latter case, the existence of the unit constant precluded the use of variables with the same name. This issue worsened with the addition of <code>m</code> as this is a rather common variable name (e.g. this cookbook <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#cropping-and-framing-geometries">recipe</a> uses it). To address this, they are no longer read-only and may now be overwritten. Of course, doing so renders their original value unavailable in the pipeline&rsquo;s subsequent expressions.</p>

<blockquote class="extract">
  <p><ul>
<li>Fixed an issue with blocks where certain nested commands could lead totally unexpected results (#506)</li>
<li>API: removed the faulty <code>temp_document()</code> context manager from <code>vpype_cli.State()</code> (#506)</li>
</ul>
</p>
</blockquote>

<p>The improved blocks introduced in <a href="/articles/2022/03/03/annotated-release-notes-vpype-1.9/"><em>vpype</em> 1.9</a> had a major flaw which could, in some circumstances, result in erratic results. It turns out that the new <code>splitdist</code> command triggered this issue and brought it in the spotlight. This is now fixed, and the <code>vpype_cli.State.temp_document()</code> API is a casualty of this patch (luckily, it was introduced recently and I&rsquo;m pretty sure no one used it yet besides me).</p>

<blockquote class="extract">
  <p><ul>
<li>Fixed an issue with the <code>lmove</code> command where order would not be respected in certain cases such as <code>lmove all 2</code> (the content of layer 2 was placed before that of layer 1) (#506)</li>
</ul>
</p>
</blockquote>

<p>This is yet another issue highlighted by to the &ldquo;plotting with paint&rdquo; workflow. When the source layers included the destination layer (as is the case for <code>lmove all 2</code>), the order of the source layers would not be respected (e.g. for a 3-layer pipeline and the<code>lmove all 2</code> command, layer 2 would end up with its original content, then layer 1, then layer 3). With this fix, the destination layer will now include the source layers' content in the correct order (e.g. in the previous example, layer 2 would end up with the content of layer 1, then layer 2, then layer 3).</p>
<br/>
<p>Collectively, these changes enable the &ldquo;plotting with paint&rdquo; workflow using the following pipeline:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ vpype <span style="color:#d14">\
</span><span style="color:#d14"></span>      <span style="color:#0086b3">read</span> input.svg <span style="color:#d14">\
</span><span style="color:#d14"></span>      forlayer <span style="color:#d14">\
</span><span style="color:#d14"></span>        lmove %_lid% <span style="color:#099">1</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>        splitdist 1m <span style="color:#d14">\
</span><span style="color:#d14"></span>        forlayer <span style="color:#d14">\
</span><span style="color:#d14"></span>          lmove %_lid% <span style="color:#d14">&#34;%_lid*2%&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>          <span style="color:#0086b3">read</span> -l <span style="color:#d14">&#34;%_lid*2-1%&#34;</span> dip_%_name%.svg <span style="color:#d14">\
</span><span style="color:#d14"></span>        end <span style="color:#d14">\
</span><span style="color:#d14"></span>      lmove all %_lid% <span style="color:#d14">\
</span><span style="color:#d14"></span>      name -l %_lid% %_name% <span style="color:#d14">\
</span><span style="color:#d14"></span>      color -l %_lid% %_color% <span style="color:#d14">\
</span><span style="color:#d14"></span>    end <span style="color:#d14">\
</span><span style="color:#d14"></span>    write output.svg
</code></pre></div><p>For this to work, the layers in <code>input.svg</code> must be named after their respective color and, for each such color, a file named <code>dip_COLORNAME.svg</code> must exist. For example, if <code>input.svg</code> has two layers named &ldquo;red&rdquo; and &ldquo;blue&rdquo;, then the <code>dip_red.svg</code> and <code>dip_blue.svg</code> files must exist.</p>
<p>The following figure illustrates the results for synthetic data.</p>
<figure class="square-corner">
    <img loading="lazy" src="/vpype_111/paint_workflow.svg"
         alt="(left) Input SVG with 3 layers. (middle) The three corresponding dipping pattern SVGs. (right) The output SVG with 3 layers and the visible dipping patterns interspersed within the line work."/> <figcaption>
            <p>(<em>left</em>) Input SVG with 3 layers. (<em>middle</em>) The three corresponding dipping pattern SVGs. (<em>right</em>) The output SVG with 3 layers and the visible dipping patterns interspersed within the line work.</p>
        </figcaption>
</figure>

<p>This pipeline is listed in a cookbook <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#inserting-regular-dipping-patterns-for-plotting-with-paint">recipe</a> and will be explained in details, along with the <code>forlayer</code> block command, in a future article.</p>
<h2 id="other-changes">Other changes</h2>

<blockquote class="extract">
  <p><ul>
<li>Improved the <code>linemerge</code> algorithm by making it less dependent on line order (#496)</li>
</ul>
</p>
</blockquote>

<p>The <code>linemerge</code> command is implemented using a <a href="https://en.wikipedia.org/wiki/Greedy_algorithm">greedy</a> algorithm which roughly works as follows:</p>
<ol>
<li>Pick the first available line.</li>
<li>Look for another line that can be appended.</li>
<li>If found, merge both lines and look for further line to append (back to step 2). If not, save the current line, pick the next available one, and repeat (back to step 1).</li>
</ol>
<p>By default, <code>linemerge</code> always considers both endings of each line, possibly reversing them if this enables a merge. This is not always desirable though, which is why the <code>--no-flip</code> option exists. In this case, the algorithm would only try to <em>append</em> to the current line, without trying to <em>prepend</em> as well. This oversight led to a greater dependence on line order and, occasionally, suboptimal results, as illustrated by the figure below.</p>
<figure>
    <img loading="lazy" src="/vpype_111/linemerge.svg"
         alt="(left) Initial situation. (middle) Result when both appending only. (right) Results when appending and prepending."/> <figcaption>
            <p>(<em>left</em>) Initial situation. (<em>middle</em>) Result when both appending only. (<em>right</em>) Results when appending and prepending.</p>
        </figcaption>
</figure>

<p>With this fix, <code>linemerge --no-flip</code> now tries to both append and prepend, leading to more consistent results.</p>

<blockquote class="extract">
  <p><ul>
<li>Added <code>--keep-page-size</code> option to <code>grid</code> command (#506)</li>
</ul>
</p>
</blockquote>

<p>By default, the <code>grid</code> block command sets the page size to its geometry. For example, the block <code>grid --offset 4cm 3cm 3 5 [...] end</code> sets the page size to 12x15cm. This behaviour can now be disabled with the <code>--keep-page-size</code> option.</p>
<p>This change mainly helps for the testability of the blocks feature (in this release, I&rsquo;ve added multiple tests to minimise the risk of future regression), but I figured it could have its occasional use out there.</p>

<blockquote class="extract">
  <p><ul>
<li>Added HPGL configurations for the Houston Instrument DMP-161, HP7550, Roland DXY 1xxxseries and sketchmate plotters (thanks to @jimmykl and @ithinkido) (#472, #474)</li>
</ul>
</p>
</blockquote>

<p>Thanks a lot, <a href="https://linktr.ee/jimmyis">Jimmy Kirkus-Lamont</a> and <a href="https://github.com/ithinkido">@ithinkido</a>! ❤️</p>

<blockquote class="extract">
  <p><ul>
<li>Added equality operator to <code>vpype.LineCollection</code> and <code>vpype.Document</code> (#506)</li>
</ul>
</p>
</blockquote>

<p>I can now check if two layers or documents have the same content and metadata using the equality operator <code>==</code>. This is immensely useful when writing tests. I have no idea why it took so long… 🤷</p>

<blockquote class="extract">
  <p><ul>
<li>Pinned Shapely to 1.8.2, which is the first release in a long time to have binaries for most platforms/Python release combination (including Apple-silicon Macs and Python 3.10) (#475)</li>
</ul>
</p>
</blockquote>

<p>It was quite the roller coaster ride for <a href="https://shapely.readthedocs.io/">Shapely</a> to be properly packaged for both Python 3.10 and Apple-silicon Macs, but now this is fully sorted out. That&rsquo;s one less hassle when installing <em>vpype</em>.</p>

<blockquote class="extract">
  <p><ul>
<li>Removed deprecated API (#507)</li>
</ul>
</p>
</blockquote>

<p>With <a href="/articles/2022/03/03/annotated-release-notes-vpype-1.9/"><em>vpype</em> 1.9</a>, a number of APIs migrated from the <code>vpype</code> package to the <code>vpype_cli</code> package. The former APIs still worked but emitted <a href="/articles/2022/03/03/annotated-release-notes-vpype-1.9/#other-changes">deprecation warnings</a>. They are now gone forever.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Annotated Release Notes: vpype 1.10</title>
      <link>https://bylr.info/articles/2022/04/07/annotated-release-notes-vpype-1.10/</link>
      <pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/04/07/annotated-release-notes-vpype-1.10/</guid>
      <description>I originally intended vpype 1.10 to be a &amp;lsquo;quick-and-dirty&amp;rsquo;, bug-fix-only release but it ended up being quite substantial, so let&amp;rsquo;s dive in.
New features and improvements   Improved support for layer pen width and opacity in the viewer (#448)
 The &amp;ldquo;Pen Width&amp;rdquo; and &amp;ldquo;Pen Opacity&amp;rdquo; menus are now named &amp;ldquo;Default Pen Width&amp;rdquo; and &amp;ldquo;Default Pen Opacity&amp;rdquo;. The layer opacity is now used for display by default. It can be overridden by the default pen opacity by checking the &amp;ldquo;Override&amp;rdquo; item from the &amp;ldquo;Default Pen Opacity&amp;rdquo; menu.</description>
      <content:encoded><![CDATA[<p>I originally intended <a href="https://github.com/abey79/vpype/releases/tag/1.10.0"><em>vpype</em> 1.10</a> to be a &lsquo;quick-and-dirty&rsquo;, bug-fix-only release but it ended up being quite substantial, so let&rsquo;s dive in.</p>
<h2 id="new-features-and-improvements">New features and improvements</h2>

<blockquote class="extract">
  <p><ul>
<li>
<p>Improved support for layer pen width and opacity in the viewer (#448)</p>
<ul>
<li>The &ldquo;Pen Width&rdquo; and &ldquo;Pen Opacity&rdquo; menus are now named &ldquo;Default Pen Width&rdquo; and &ldquo;Default Pen Opacity&rdquo;.</li>
<li>The layer opacity is now used for display by default. It can be overridden by the default pen opacity by checking the &ldquo;Override&rdquo; item from the &ldquo;Default Pen Opacity&rdquo; menu.</li>
<li>The layer pen width is now used for display by default as well. Likewise, it can be overridden by checking the &ldquo;Override&rdquo; item from the &ldquo;Default Pen Width&rdquo; menu.</li>
</ul>
</li>
</ul>
</p>
</blockquote>

<p>This alone is reason to upgrade, and, if we&rsquo;re being honest, it should have been done in the previous release. The display logic of the viewer is now as follows:</p>
<ul>
<li>By default, honor the layer&rsquo;s pen width and opacity if present.</li>
<li>If pen width and/or opacity is not set, revert to the value set in the menu (0.3mm / 80% by default).</li>
<li>Either or both of the displayed pen width and opacity can be forced to the value in the menu using the new &ldquo;Override&rdquo; menu item.</li>
</ul>
<p>It is worth noting that opacity is not a standalone layer property, but is part of its RGBA color property (<code>vp_color</code>). Weirdly, <em>vpype</em> 1.9&rsquo;s viewer would honor the base color (RGB), but not its alpha chanel. (See next feature, though.)</p>
<p>By the way, this article&rsquo;s cover image is a screenshot of the viewer made with this command:</p>
<img src="/vpype_110/demo_cmd.png"alt="vpype  repeat 100  circle --layer %_i&#43;1% %_i*mm% 0 1cm  color --layer %_i&#43;1% red  alpha --layer %_i&#43;1% %(_i&#43;1)*.7/_n%  end  repeat 50  circle --layer %_i&#43;101% %2*_i*mm% 3cm 1cm  color --layer %_i&#43;101% blue  penwidth --layer %_i&#43;101% %(0.05&#43;_i/100)*2.5*mm%  end  layout --fit-to-margins 1cm --landscape 21x10cm  show"width="85%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>(Yes, this is a properly syntax-highlighted <em>vpype</em> command made with a custom script and <a href="https://github.com/Textualize/rich">Rich</a>&rsquo;s new <a href="https://twitter.com/willmcgugan/status/1510621023678476291?s=20&amp;t=KegUSS_vGKzzG8GzoFsoFQ">SVG export</a>. This is very preliminary, but, in time, something to improve on and deploy more widely in the doc and elsewhere.)</p>

<blockquote class="extract">
  <p><ul>
<li>Added the <code>alpha</code> command to set layer opacity without changing the base color (#447, #451)</li>
</ul>
</p>
</blockquote>

<p>While working on the viewer improvements, I realized how inconvenient it was to set an arbitrary opacity value. Using CSS color names (e.g. <code>color red</code>) always sets opacity to 100% and there is no way around the hex notation for a custom value (e.g. <code>color #ff00007f</code> or <code>color #f007</code>). The new <code>alpha</code> command fills that gap: <code>color red  alpha 0.5</code>.</p>

<blockquote class="extract">
  <p><ul>
<li>Added HPGL configuration for the Calcomp Artisan plotter (thanks to Andee Collard and @ithinkido) (#418)</li>
</ul>
</p>
</blockquote>

<p>Good news for Calcomp Artisan&rsquo;s owners! Let this be a reminder that I welcome this kind of contribution. Though I&rsquo;d like to, I can&rsquo;t own every single type of vintage plotter! 😅</p>

<blockquote class="extract">
  <p><ul>
<li>
<p>The <code>read</code> command now better handles SVGs with missing <code>width</code> or <code>height</code> attributes (#446)</p>
<p>When the <code>width</code> or <code>height</code> attribute is missing or expressed as percent, the <code>read</code> command now attempts to use the <code>viewBox</code> attribute to set the page size, defaulting to 1000x1000px if missing. This behavior can be overridden with the <code>--display-size</code> and the <code>--display-landscape</code> parameters.</p>
</li>
</ul>
</p>
</blockquote>

<p>I recently came across a SVG with a <code>viewBox</code> defined but no <code>width</code>/<code>height</code> attributes:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-svg" data-lang="svg"><span style="color:#000080">&lt;svg</span> <span style="color:#008080">xmlns=</span><span style="color:#d14">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#008080">viewBox=</span><span style="color:#d14">&#34;0 0 1191.26 1684.49&#34;</span><span style="color:#000080">&gt;</span>...<span style="color:#000080">&lt;/svg&gt;</span>
</code></pre></div><p>In such an instance, using the <code>read</code> command used to default to an A4 page size, while the <code>vpype.read_svg()</code> API (and friends) would default to a 1000x1000px page size. This is both inconsistent and missing the opportunity to fallback on the <code>viewBox</code>. <em>vpype</em> now fully delegates this fallback logic to <a href="https://github.com/meerk40t/svgelements"><code>svgelements</code></a>, which does a good job at making the most of the available information. Also, if everything is missing (or <code>width</code>/<code>height</code> are expressed in percents), <em>vpype</em> consistently falls back to 1000x1000px.</p>

<blockquote class="extract">
  <p><ul>
<li>Added the <code>--dont-set-date</code> option to the <code>write</code> command (#442)</li>
</ul>
</p>
</blockquote>

<p>This one is a bit niche. <em>vpype</em> adds some metadata to the SVG, including the date and time at which it was generated (note the <code>&lt;dc:date&gt;</code> tag):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ vpype line 1cm 1cm 5cm 3cm layout a6 write -f svg -
&lt;?xml <span style="color:#008080">version</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;1.0&#34;</span> <span style="color:#008080">encoding</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;utf-8&#34;</span> ?&gt;
&lt;svg <span style="color:#008080">xmlns</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://www.w3.org/2000/svg&#34;</span> xmlns:cc<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://creativecommons.org/ns&#34;</span> xmlns:dc<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://purl.org/dc/elements/1.1/&#34;</span> xmlns:ev<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://www.w3.org/2001/xml-events&#34;</span> xmlns:inkscape<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://www.inkscape.org/namespaces/inkscape&#34;</span> xmlns:rdf<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns&#34;</span> xmlns:sodipodi<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&#34;</span> xmlns:xlink<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;http://www.w3.org/1999/xlink&#34;</span> <span style="color:#008080">baseProfile</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;tiny&#34;</span> <span style="color:#008080">height</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;14.8cm&#34;</span> <span style="color:#008080">version</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;1.2&#34;</span> <span style="color:#008080">viewBox</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;0 0 396.85039370078744 559.3700787401575&#34;</span> <span style="color:#008080">width</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;10.5cm&#34;</span>&gt;
  &lt;metadata&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:source&gt;vpype line 1cm 1cm 5cm 3cm layout a6 write -f svg -
&lt;/dc:source&gt;
        &lt;dc:date&gt;2022-04-07T10:15:00.532842&lt;/dc:date&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;defs/&gt;
  &lt;g <span style="color:#008080">fill</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;none&#34;</span> <span style="color:#008080">id</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;layer1&#34;</span> inkscape:groupmode<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;layer&#34;</span> inkscape:label<span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;1&#34;</span> <span style="color:#008080">stroke</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;#0000ff&#34;</span> <span style="color:#008080">style</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;display:inline&#34;</span>&gt;
    &lt;line <span style="color:#008080">x1</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;122.8346&#34;</span> <span style="color:#008080">x2</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;274.0157&#34;</span> <span style="color:#008080">y1</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;241.8898&#34;</span> <span style="color:#008080">y2</span><span style="color:#000;font-weight:bold">=</span><span style="color:#d14">&#34;317.4803&#34;</span>/&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</code></pre></div><p>This is all well and good until you automate the generation of SVGs under a version control system, which is what I did for <a href="https://github.com/abey79/vpype-perspective">vpype-perspective</a>&rsquo;s documentation figures. A <a href="https://pydoit.org">PyDoIt</a> <a href="https://github.com/abey79/vpype-perspective/blob/main/examples/dodo.py"><code>dodo.py</code></a> files converts any <code>.vpy</code> file it finds into corresponding SVGs – basically a Python-powered, overcharged <code>Makefile</code>. (This is a rather neat process which, by the way, should get its own article someday.) In this kind of setup, having a ever-changing date in the SVG yields many unwanted VCS diffs which can now be avoided using this option.</p>
<h2 id="bug-fixes">Bug fixes</h2>

<blockquote class="extract">
  <p><ul>
<li>Fixed an issue with <code>forlayer</code> where the <code>_n</code> variable was improperly set (#443)</li>
</ul>
</p>
</blockquote>

<p>One word: inexcusable 🙄</p>

<blockquote class="extract">
  <p><ul>
<li>Fixed an issue with <code>write</code> where layer opacity was included in the <code>stroke</code> attribute instead of using <code>stroke-opacity</code>, which, although compliant, was not compatible with Inkscape (#429)</li>
</ul>
</p>
</blockquote>

<p>This one is <a href="https://gitlab.com/inkscape/inbox/-/issues/1195">Inkscape</a>&rsquo;s <a href="https://gitlab.com/inkscape/inbox/-/issues/1195">fault</a>. Using <code>stroke-opacity</code> is &ldquo;more compatible&rdquo; anyways, so it&rsquo;s a good move regardless.</p>

<blockquote class="extract">
  <p><ul>
<li>Fixed an issue with <code>vpype --help</code> where commands from plug-ins would not be listed (#444)</li>
</ul>
</p>
</blockquote>

<p>I ran into an issue with <a href="https://click.palletsprojects.com">Click</a> where a sub-command plug-in using APIs from the top-level command&rsquo;s package (a scheme widely used by <em>vpype</em> and its plug-ins) would fail because of circular imports. The workaround I used in <em>vpype</em> 1.9 meant that plug-ins were no longer listed in <code>vpype --help</code>. This is fixed now, but this may not be the end of the story. I tried – and failed – to reproduce the original issue in a minimal demo project and I&rsquo;ll have to further dig into this someday.</p>

<blockquote class="extract">
  <p><ul>
<li>Fixed a minor issue where plug-ins would be reloaded each time <code>vpype_cli.execute()</code> is called (#444)</li>
</ul>
</p>
</blockquote>

<p>By &ldquo;minor&rdquo;, I mean that this amounted to a tiny performance hit for Python scripts using <em>vpype</em>&rsquo;s <a href="https://vpype.readthedocs.io/en/latest/api/vpype_cli.html#vpype_cli.execute"><code>execute()</code></a> API multiple times.</p>

<blockquote class="extract">
  <p><ul>
<li>Fixed a rendering inconsistency in the viewer where the ruler width could vary by one pixel depending on the OpenGL driver/GPU/OS combination (#448)</li>
</ul>
</p>
</blockquote>

<p>The ruler of <em>vpype</em>&rsquo;s viewer is supposed to be 20px wide, but it turns out that either of the horizontal or the vertical one was 21px wide instead. Which one? It depends on the platform and my Intel/AMD- and M1-based laptops disagreed on the matter! 😲</p>
<img src="/vpype_110/bad_rulers.gif"alt="animation of a rendering discrepancy"width="50%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>It took me a while to discover that this is due to drawing lines at a 0.5px offset with respect to the pixel grid, leading to unpredictable rounding behavior. This is basically what happens when drawing horizontal or vertical lines with integer coordinates, and I <a href="/articles/2022/04/05/til-aligning-horizontal-or-vertical-lines-to-the-pixel-grid-with-opengl/">wrote about it</a> a few days ago.</p>
<p>You&rsquo;d think that not one soul would care about this, but some of my tests are based on comparing newly rendered images of the viewer with previously-generated reference images, and those tests would fail on my new M1 Mac.</p>
<h2 id="api-changes">API changes</h2>

<blockquote class="extract">
  <p><ul>
<li>Added <code>vpype_cli.FloatType()</code>, <code>vpype_cli.IntRangeType()</code>, <code>vpype_cli.FloatRangeType()</code>, and <code>vpype_cli.ChoiceType()</code> (#430, #447)</li>
</ul>
</p>
</blockquote>

<p>These <code>Click</code> types provide support for <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#property-substitution">property</a> and <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#expression-substitution">expression substitution</a>. They were missing from <em>vpype</em> 1.9 because they aren&rsquo;t needed internally. Plug-ins, however, wanted them, including <a href="https://github.com/serycjon/vpype-flow-imager">flow imager</a> and my new <a href="https://github.com/abey79/vpype-perspective">vpype-perspective</a>.</p>

<blockquote class="extract">
  <p><ul>
<li>Changed <code>vpype.Document.add_to_sources()</code> to also modify the <code>vp_source</code> property (#431)</li>
</ul>
</p>
</blockquote>

<p>This will simplify the code needed to handle sources in plug-ins.</p>

<blockquote class="extract">
  <p><ul>
<li>Changed the parameter name of both <code>vpype_viewer.Engine()</code> and <code>vpype_viewer.render_image()</code> from <code>pen_width</code> and <code>pen_opacity</code> to <code>default_pen_width</code> and <code>default_pen_opacity</code> (breaking change) (#448)</li>
<li>Added <code>override_pen_width</code> and <code>override_pen_opacity</code> boolean parameters to both <code>vpype_viewer.Engine()</code> and <code>vpype_viewer.render_image()</code> (#448)</li>
<li>Added a <code>set_date:bool = True</code> argument to <code>vpype.write_svg()</code> (#442)</li>
<li>Changed the default value of <code>default_width</code> and <code>default_height</code> arguments of <code>vpype.read_svg()</code> (and friends) to <code>None</code> to allow <code>svgelement</code> better handle missing <code>width</code>/<code>height</code> attributes (#446)</li>
</ul>
</p>
</blockquote>

<p>These are the API counterparts of some of the changes described before.</p>
<h2 id="other-changes">Other changes</h2>

<blockquote class="extract">
  <p><ul>
<li>Added support for Python 3.10 and dropped support for Python 3.7 (#417)</li>
</ul>
</p>
</blockquote>

<p>Walruses <a href="https://github.com/abey79/vpype/blob/0e01b45f6e8cef0352cd369a215aeaaeade97b48/vpype/model.py#L620">have appeared</a> already! 🦭</p>

<blockquote class="extract">
  <p><ul>
<li>Updated code base with modern typing syntax (using <a href="https://github.com/asottile/pyupgrade">pyupgrade</a>) (#427)</li>
</ul>
</p>
</blockquote>

<p>I was this year old when I learned that you can use modern <a href="https://docs.python.org/3/library/typing.html">typing</a> syntax (such as <code>list[int] | None</code>) with older Python versions thanks to this statement:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000;font-weight:bold">from</span> <span style="color:#555">__future__</span> <span style="color:#000;font-weight:bold">import</span> annotations
</code></pre></div><p>I swiftly ran <a href="https://github.com/asottile/pyupgrade">pyupgrade</a> on the entire code base to bring it up to date.</p>

<blockquote class="extract">
  <p><ul>
<li>Updated the <a href="https://vpype.readthedocs.io/en/latest/">documentation</a> template (#428)</li>
</ul>
</p>
</blockquote>

<p>It looks cleaner now IMO, though there is still a <a href="https://github.com/abey79/vpype/issues/400">whole lot</a> that could be improved.</p>

<blockquote class="extract">
  <p><ul>
<li>Updated installation instructions to use pipx (#428)</li>
</ul>
</p>
</blockquote>

<p>I have yet to get over how long it took me to realize this! 😳 I&rsquo;m sorry for everyone who has struggled with virtual environments to install <em>vpype</em>!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Annotated Release Notes: vpype 1.9</title>
      <link>https://bylr.info/articles/2022/03/03/annotated-release-notes-vpype-1.9/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bylr.info/articles/2022/03/03/annotated-release-notes-vpype-1.9/</guid>
      <description>vpype \ text -l1 -p 0 3.5cm &#34;Custom layer name/color/pen width&#34; \ text -l2 -p 5cm 4.5cm -s 24 &#34;Properties&#34; \ text -l2 -p 2cm 5.5cm -s 20 &#34;Expressions&#34; \ text -l1 -p 6cm 6.5cm -s 24 &#34;Better/new block processors&#34; \ text -l2 -p 3cm 8cm &#34;...and much more!&#34; \ layout -m 0.3cm -l 10x3.5cm \ penwidth -l2 0.5mm \ color -l2 &#34;%Color(226,200,0)%&#34; \ color -l1 &#34;%Color(3,118,207)%&#34; \ color -l1 blue \ show -- vpype 1.</description>
      <content:encoded><![CDATA[<!--
<img src="/vpype_19/banner_ua.png"width="60%"style="display:block;margin-left:auto;margin-right:auto"/>

vpype \
text -l1 -p 0 3.5cm "Custom layer name/color/pen width" \
text -l2 -p 5cm 4.5cm -s 24 "Properties" \
text -l2 -p 2cm 5.5cm -s 20 "Expressions" \
text -l1 -p 6cm 6.5cm -s 24 "Better/new block processors" \
text -l2 -p 3cm 8cm "...and much more!" \
layout -m 0.3cm -l 10x3.5cm \
penwidth -l2 0.5mm \
color -l2 "%Color(226,200,0)%" \
color -l1 "%Color(3,118,207)%" \
color -l1 blue \
show
-->
<p><a href="https://github.com/abey79/vpype"><em>vpype</em></a> 1.9 is finally out! 🎉</p>
<p>I recently stumbled upon a <a href="https://simonwillison.net/2022/Jan/31/release-notes/">post</a> by <a href="https://twitter.com/simonw">Simon Willison</a> where he promotes the idea of <em>annotated release notes</em>. As it turns out, this release is, by any metric I can think of, the biggest and most transformative so far. The associated <a href="https://github.com/abey79/vpype/blob/master/CHANGELOG.md#19">change log</a> is consequently rather unwieldy and calls, you guessed it 💡, for the present annotated release notes.</p>
<p>(Note: although the <a href="https://github.com/abey79/vpype/blob/master/CHANGELOG.md#19">original release notes</a> are extensively quoted in this article, I reshuffled and shortened the original material. Make sure to check the base material for an authoritative list of change.)</p>
<h2 id="properties">Properties</h2>
<h3 id="basics">Basics</h3>

<blockquote class="extract">
  <p><ul>
<li>
<p>Added support for global and per-layer <a href="(https://vpype.readthedocs.io/en/latest/fundamentals.html#properties)">properties</a> (#359)</p>
<p>This feature introduces metadata to the pipeline in the form of properties which may either be attached to specific layers (layer property) or all of them (global property). Properties are identified by a name and may be of arbitrary type (e.g. integer, floating point, color, etc.). A number of <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#system-properties">system properties</a> with a specific name (prefixed with <code>vp_</code>) and type are introduced to support some of the new features.</p>
</li>
</ul>
</p>
</blockquote>

<p>Metadata is data which says something about other data, and <em>vpype</em> lacked such a thing. Until now, what was passed from one command to the next consisted <em>exclusively</em> of paths sorted into layers, without any context such as what the color of these paths might be. One command could &ldquo;know&rdquo; about something (e.g. <code>read</code> knows, from the SVG, the color of a layer), but it could not &ldquo;tell&rdquo; the next command(s) about it.</p>
<p>This is no more, thanks to properties. They offer a generic mechanism to attach data to pipeline and layers. They are the backbone of several features introduced today, and lay the ground for future features within <em>vpype</em> or in plug-ins.</p>
<h3 id="layer-color-pen-width-and-name">Layer color, pen width, and name</h3>

<blockquote class="extract">
  <p><ul>
<li>Layer color, pen width, and name are now customizable (#359, #376, #389)
<ul>
<li>The <code>read</code> commands now sets layer color, pen width, and name based on the input SVG if possible.</li>
<li>The new <code>color</code>, <code>penwdith</code>, and <code>name</code> commands can be used to modify layer color, pen width, and name.</li>
<li>The new <code>pens</code> command can apply a predefined or custom scheme on multiple layers at once. Two common schemes are built-in: <code>rgb</code> and <code>cmyk</code>. <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#creating-a-custom-pen-configuration">Custom schemes</a> can be defined in the configuration file.</li>
<li>The <code>show</code> and <code>write</code> commands now take into account these layer properties.</li>
</ul>
</li>
</ul>
</p>
</blockquote>

<p>Supporting arbitrary layer colors, pen widths, and names, has long been amongst the most requested features. Well, thanks to properties, here they are. It happens automagically when using <code>read</code>, and the new commands can further customise these values:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ vpype <span style="color:#d14">\
</span><span style="color:#d14"></span>    rect --layer <span style="color:#099">1</span> <span style="color:#099">0</span> <span style="color:#099">0</span> 5cm 5cm <span style="color:#d14">\
</span><span style="color:#d14"></span>    color --layer <span style="color:#099">1</span> purple <span style="color:#d14">\
</span><span style="color:#d14"></span>    penwidth --layer <span style="color:#099">1</span> 0.5mm <span style="color:#d14">\
</span><span style="color:#d14"></span>    circle --layer <span style="color:#099">2</span> 4cm 4cm 2cm <span style="color:#d14">\
</span><span style="color:#d14"></span>    color --layer <span style="color:#099">2</span> orange <span style="color:#d14">\
</span><span style="color:#d14"></span>    penwidth --layer <span style="color:#099">2</span> 5mm <span style="color:#d14">\
</span><span style="color:#d14"></span>    show
</code></pre></div><img src="/vpype_19/color_penwidth.png"width="40%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>The new, high-level <code>color</code>, <code>penwidth</code>, and <code>name</code> commands are simple wrappers which change the value of specific <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#system-properties">system properties</a> (i.e. <code>vp_color</code>, <code>vp_pen_width</code>, resp. <code>vp_name</code>):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype random name <span style="color:#d14">&#34;hello&#34;</span> color purple penwidth 0.1mm proplist --layer <span style="color:#099">1</span>
<span style="color:#888">listing 3 properties for layer 1
</span><span style="color:#888">  vp_color: (color) #800080
</span><span style="color:#888">  vp_name: (str) hello
</span><span style="color:#888">  vp_pen_width: (float) 0.37795275590551186
</span></code></pre></div><p>System properties differ from &ldquo;regular&rdquo; properties only in the sense that they have special meaning to <em>vpype</em>. By convention, their name is prefixed with <code>vp_</code>.</p>
<p>Special mention for the new <code>pens</code> command, which is short for <em>here is the set of pens I intend to use for this plot</em>. It sets in bulk layer colors, pen widths and/or names all at once, based on a built-in or <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#creating-a-custom-pen-configuration">custom</a> configuration. For example, this produces a CMYK SVG using the <a href="https://github.com/serycjon/vpype-flow-imager">flow imager</a> plug-in:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ vpype <span style="color:#d14">\
</span><span style="color:#d14"></span>    flow_img <span style="color:#000;font-weight:bold">[</span>...<span style="color:#000;font-weight:bold">]</span> --cmyk input.jpg <span style="color:#d14">\
</span><span style="color:#d14"></span>    pens cmyk <span style="color:#d14">\
</span><span style="color:#d14"></span>    write output.svg
</code></pre></div>
<blockquote class="extract">
  <p><ul>
<li>
<p>Introduced new commands for low-level inspection and modification of properties (#359)</p>
<ul>
<li><code>propget</code>: gets the value of a given global or layer property</li>
<li><code>proplist</code>: lists all global and/or layer properties and their value</li>
<li><code>propset</code>: sets the value of a given global or layer property</li>
<li><code>propdel</code>: deletes a given global or layer property</li>
<li><code>propclear</code>: removes all global and/or layer properties</li>
</ul>
</li>
</ul>
</p>
</blockquote>

<p>These are low-level commands to interact with properties. Although they have limited use in real-world workflows, they come in handy when learning about properties or crafting complex pipelines.</p>

<blockquote class="extract">
  <p><ul>
<li>
<p>Updated layer operation commands to handle properties (#359)</p>
<ul>
<li>When a single source layer is specified and <code>--prob</code> is not used, the <code>lcopy</code> and <code>lmove</code> commands now copy the source layer&rsquo;s properties to the destination layer (possibly overwriting existing properties).</li>
<li>When <code>--prob</code> is not used, the <code>lswap</code> command now swaps the layer properties as well.</li>
<li>These behaviors can be disabled with the <code>--no-prop</code> option.</li>
</ul>
</li>
</ul>
</p>
</blockquote>

<p>With properties, some of the layer manipulation commands became somewhat ambiguous. For example, what happens with properties when using <code>lmove all 1</code> (merges all layers into layer one) or <code>move --prob 0.5 1 2</code> (picks geometries from layer 1 with a 50% probability and moves them to layer 2)?</p>
<p>I opted for a strategy where layer properties are affected <em>only</em> for unambiguous cases. This is basically when a single layer is moved/copied and when probabilistic behaviour is not used at all. In all other cases, the layer properties are left unchanged.</p>
<h3 id="from-svg-attributes-to-properties">From SVG attributes to properties</h3>

<blockquote class="extract">
  <p><ul>
<li>
<p>Added the <code>--attr</code> option to the <code>read</code> command to (optionally) sort geometries by attributes (e.g. stroke color, stroke width, etc.) instead of by SVG layer (#378, #389)</p>
</li>
<li>
<p>The <code>read</code> and <code>write</code> commands now preserve a sub-set of SVG attributes (experimental) (#359, #389)</p>
<p>The <code>read</code> command identifies SVG attributes (e.g. <code>stroke-dasharray</code>) which are common in all geometries within each layer. These attributes are saved as layer properties with their name prefixed with <code>svg_</code> (e.g. <code>svg_stroke-dasharray</code>). The <code>write</code> command can optionally restore these attributes in the output SVG using the <code>--restore-attribs</code> option.</p>
</li>
</ul>
</p>
</blockquote>

<p>As noted, the <code>read</code> command now tries to extract SVG attributes and store them as layer properties. There are two motivations for that. First, it enables the <code>write</code> command to optionally restore these attributes in the output file, in order to achieve a higher degree of fidelity. (This feature is experimental and opt-in for the time being.) Second, it enables future features or plug-ins to do neat things such as generating hatch fills when <code>fill</code> is set to a color, or cutting paths in bits to emulate <code>stroke-dasharray</code> if defined.</p>
<p>Now, since properties are only available at the layer level (or globally), <code>read</code> discards SVG attributes that are not shared amongst <em>every</em> paths within a given layer. Let&rsquo;s take an example:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-svg" data-lang="svg"><span style="color:#000080">&lt;svg</span> <span style="color:#008080">xmlns=</span><span style="color:#d14">&#34;http://www.w3.org/2000/svg&#34;</span> <span style="color:#008080">width=</span><span style="color:#d14">&#34;650&#34;</span> <span style="color:#008080">height=</span><span style="color:#d14">&#34;650&#34;</span><span style="color:#000080">&gt;</span>
    <span style="color:#000080">&lt;circle</span> <span style="color:#008080">cx=</span><span style="color:#d14">&#34;150&#34;</span> <span style="color:#008080">cy=</span><span style="color:#d14">&#34;150&#34;</span> <span style="color:#008080">r=</span><span style="color:#d14">&#34;100&#34;</span> <span style="color:#008080">stroke=</span><span style="color:#d14">&#34;red&#34;</span> <span style="color:#008080">stroke-width=</span><span style="color:#d14">&#34;0.5mm&#34;</span> <span style="color:#008080">fill=</span><span style="color:#d14">&#34;green&#34;</span> <span style="color:#000080">/&gt;</span>
    <span style="color:#000080">&lt;rect</span> <span style="color:#008080">x=</span><span style="color:#d14">&#34;400&#34;</span> <span style="color:#008080">y=</span><span style="color:#d14">&#34;200&#34;</span> <span style="color:#008080">width=</span><span style="color:#d14">&#34;200&#34;</span> <span style="color:#008080">height=</span><span style="color:#d14">&#34;400&#34;</span> <span style="color:#008080">stroke=</span><span style="color:#d14">&#34;blue&#34;</span> <span style="color:#008080">stroke-width=</span><span style="color:#d14">&#34;0.5mm&#34;</span> <span style="color:#008080">fill=</span><span style="color:#d14">&#34;green&#34;</span> <span style="color:#000080">/&gt;</span>
    <span style="color:#000080">&lt;path</span> <span style="color:#008080">d=</span><span style="color:#d14">&#34;M250,600 l-200,0 l0,-200 z&#34;</span> <span style="color:#008080">stroke=</span><span style="color:#d14">&#34;blue&#34;</span> <span style="color:#008080">stroke-width=</span><span style="color:#d14">&#34;0.1mm&#34;</span> <span style="color:#008080">fill=</span><span style="color:#d14">&#34;green&#34;</span> <span style="color:#000080">/&gt;</span>
<span style="color:#000080">&lt;/svg&gt;</span>
</code></pre></div><p>This SVG only contains top-level elements, which <em>vpype</em> loads in layer 1 by default. The <code>fill</code> property is common to all paths and thus stored as a layer property, but the <code>stroke</code> and <code>stroke-width</code> attributes are heterogeneous and thus discarded. As a result, the <code>show</code> command uses the default color and pen width.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype <span style="color:#0086b3">read</span> example.svg proplist --layer <span style="color:#099">1</span> show
<span style="color:#888">listing 1 properties for layer 1
</span><span style="color:#888">  svg_fill: (str) green
</span></code></pre></div><img src="/vpype_19/read_example.png"width="40%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>To address this issue, the <code>read</code> command has now the option to create layers based on SVG attributes instead of structure:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype <span style="color:#0086b3">read</span> --attr stroke --attr stroke-width example.svg proplist --layer all show
<span style="color:#888">listing 5 properties for layer 1
</span><span style="color:#888">  svg_fill: (str) green
</span><span style="color:#888">  svg_stroke: (str) red
</span><span style="color:#888">  svg_stroke-width: (str) 0.5mm
</span><span style="color:#888">  vp_color: (color) #ff0000
</span><span style="color:#888">  vp_pen_width: (float) 1.8897648
</span><span style="color:#888">listing 5 properties for layer 2
</span><span style="color:#888">  svg_fill: (str) green
</span><span style="color:#888">  svg_stroke: (str) blue
</span><span style="color:#888">  svg_stroke-width: (str) 0.5mm
</span><span style="color:#888">  vp_color: (color) #0000ff
</span><span style="color:#888">  vp_pen_width: (float) 1.8897648
</span><span style="color:#888">listing 5 properties for layer 3
</span><span style="color:#888">  svg_fill: (str) green
</span><span style="color:#888">  svg_stroke: (str) blue
</span><span style="color:#888">  svg_stroke-width: (str) 0.1mm
</span><span style="color:#888">  vp_color: (color) #0000ff
</span><span style="color:#888">  vp_pen_width: (float) 0.37795296000000006
</span></code></pre></div><img src="/vpype_19/read_attr_example.png"width="40%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>In this case, <code>read</code> creates one layer per unique combination of <code>stroke</code> and <code>stroke-width</code> attribute, resulting in a total of three layers, each assigned with the correct properties, and correctly displayed by <code>show</code>.</p>
<h3 id="source-files">Source files</h3>

<blockquote class="extract">
  <p><ul>
<li>The <code>read</code> command now records the source SVG paths in the <code>vp_source</code> and <code>vp_sources</code> system properties (see the <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#system-properties">documentation</a>) (#397, #406, #408)</li>
</ul>
</p>
</blockquote>

<p>The idea of the <code>vp_source</code> and <code>vp_sources</code> properties is to keep track of the files from which the content of the pipeline originates from. The <code>vp_source</code> property is a single path, which is overwritten by the last command importing from a file. The <code>vp_sources</code> property is a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets">set</a> of <em>all</em> source files encountered so far. Both properties are <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib.Path</code></a> instances.</p>
<p>This is, for example, what happens when using <code>read</code> twice:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype <span style="color:#0086b3">read</span> machine_typography_01_3.svg <span style="color:#0086b3">read</span> machine_typography_02_3.svg proplist -g
<span style="color:#888">listing 5 global properties
</span><span style="color:#888">  svg_fill: (str) black
</span><span style="color:#888">  svg_stroke: (str) none
</span><span style="color:#888">  vp_page_size: (tuple) (396.850608, 559.3703808000001)
</span><span style="color:#888">  vp_source: (PosixPath) /private/tmp/MT/machine_typography_02_3.svg
</span><span style="color:#888">  vp_sources: (set) {PosixPath(&#39;/private/tmp/MT/machine_typography_01_3.svg&#39;), PosixPath(&#39;/private/tmp/MT/machine_typography_02_3.svg&#39;)}
</span></code></pre></div><p>Here, <code>vp_source</code> points to the file read by the last <code>read</code> command, but <code>vp_sources</code> contains all two source files.</p>
<p>Currently, <code>read</code> is the only command which sets these variables, but the idea is that any command involved with reading a file (SVG or otherwise) should set these properties, including plug-ins such as <a href="https://github.com/plottertools/hatched">hatched</a>, <a href="https://github.com/serycjon/vpype-flow-imager">flow imager</a>, or <a href="https://github.com/EmbroidePy/vpype-embroidery">vpype-embroidery</a>.</p>
<p>One of the most common use case is to name the output file after the input file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype flow_img <span style="color:#000;font-weight:bold">[</span>...<span style="color:#000;font-weight:bold">]</span> my_image.png write <span style="color:#d14">&#34;{vp_name.stem}_converted.svg&#34;</span>
</code></pre></div><p>Note the use of a property substitution pattern, which brings us to the next topic.</p>
<h3 id="property-substitution">Property substitution</h3>

<blockquote class="extract">
  <p><ul>
<li>
<p>Added <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#property-substitution">property substitution</a> to CLI user input (#395)</p>
<p>The input provided to most commands' arguments and options may now contain substitution patterns which will be replaced by the corresponding property value. Property substitution patterns are marked with curly braces (e.g. <code>{property_name}</code>) and support the same formatting capabilities as the Python&rsquo;s <a href="https://docs.python.org/3/library/string.html#formatstrings"><code>format()</code> function</a>.</p>
</li>
</ul>
</p>
</blockquote>

<p>This is where things start becoming &ldquo;meta&rdquo;! 🤯</p>
<p>As shown in the previous example, the value of a property may now be used anywhere as input using property substitution patterns.</p>
<p>Here is another example where the full path of the input file is drawn and displayed:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype <span style="color:#0086b3">read</span> example.svg text -p 0.5cm 0.5cm <span style="color:#d14">&#34;{vp_source}&#34;</span> show
</code></pre></div><img src="/vpype_19/prop_subst.png"width="40%"style="display:block;margin-left:auto;margin-right:auto"/>
<p>Again, <code>vp_source</code> is a <a href="https://docs.python.org/3/library/pathlib.html"><code>pathlib.Path</code></a> instance, so <code>{vp_source.name}</code> (file name) or <code>{vp_source.stem}</code> (file name without extension) could be used instead.</p>
<p>Multiple substitution patterns can be combined and mixed with regular text. For example, this creates an output file in the same directory as, and named after, the input file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ vpype <span style="color:#0086b3">read</span> example.svg linesort <span style="color:#d14">\
</span><span style="color:#d14"></span>    write <span style="color:#d14">&#34;{vp_source.parent}/{vp_source.stem}_optimised.svg&#34;</span>
</code></pre></div><p>Of course, when using <em>vpype</em> interactively, it&rsquo;s easier to simply spell out the output file name. Instead, this kind of mechanism makes it considerably easier to write generic, reusable <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#wrapping-a-vpype-pipeline-in-a-shell-script">shell scripts</a>.</p>
<p>Note that, since property substitution internally relies on Python&rsquo;s <a href="https://docs.python.org/3/library/string.html#formatstrings"><code>str.format()</code></a> function, the number formatting mini-language is available as well (e.g. <code>{vp_pen_width:.02f}</code>). See the <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#property-substitution">documentation</a> for some examples.</p>
<p>Now, taking a step back, this feature is neat indeed, but its usefulness turns out to be limited in many non-trivial, real-world scenarios. I had hoped it would unlock several workflows I had in mind, but it just did not - or not elegantly enough. So much so that I even considered dropping the feature altogether.</p>
<p>This was a bit frustrating, to say the least. And ultimately lead to what is the next big chapter of this release.</p>
<h2 id="expressions">Expressions</h2>

<blockquote class="extract">
  <p><ul>
<li>
<p>Added <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#expression-substitution">expression substitution</a> to CLI user input (#397)</p>
<p>The input provided to most command&rsquo;s arguments and options may now contain expression patterns which are evaluated before the command is executed. Expression patterns are marked with the percent symbol <code>%</code> (e.g. <code>%3+4%</code>) and support a large subset of the Python language. <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#load-multiple-files-merging-their-layers-by-name">A</a> <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#cropping-and-framing-geometries">lot</a> <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#laying-out-multiple-svgs-on-a-grid">of</a> <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#create-interactive-scripts-with-input">examples</a> were added in the <a href="https://vpype.readthedocs.io/en/latest/cookbook.html">cookbook</a>.</p>
</li>
</ul>
</p>
</blockquote>

<p>This is possibly the most transformative feature brought to <em>vpype</em> since its inception: anything between pairs of <code>%</code> characters is now evaluated as (a sub-set of) Python code, and the result is substituted in the input before it reaches the actual command. The documentation has been updated with a whole new <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#expression-substitution">section</a> about expressions (which I&rsquo;m not going to repeat here), and the <a href="https://vpype.readthedocs.io/en/latest/cookbook.html">cookbook</a> has plenty of examples making use of them. Do check them out for a taste of what expressions are capable of!</p>
<p>This feature blurs the lines between a mere CLI tool and a programming language. This begs the question of why not using a programming language in the first place, a point <a href="https://ptb.discord.com/channels/499297341472505858/748589023731122277/939168445759631411">raised</a> by fellow Python dev and <a href="https://github.com/serycjon/vpype-flow-imager">flow imager</a> author <a href="https://github.com/serycjon">Jonas Serych</a>. <em>vpype</em> even offers a proper <a href="https://vpype.readthedocs.io/en/latest/api.html">API</a> for that!</p>
<p>Here are my thoughts about this:</p>
<ul>
<li>Users of <em>vpype</em> are often not Python developers &ndash; or developers at all. Expressions build on existing <em>vpype</em> knowledge and bring, at least through examples and recipes that can be copy/pasted/customized, tiny bits of programs which are readily useful, without the need to learn much of the Python syntax and ecosystem.</li>
<li>For many real-world cases (see the examples linked in the release notes), the resulting one-liners are more compact than the equivalent in proper code - even Python, even with <em>vpype</em> API. (Arbitrarily complex pipelines can of course be conceivably crafted as counter-examples, but this is besides the point.)</li>
</ul>

<blockquote class="extract">
  <p><ul>
<li>Added the <code>eval</code> command as placeholder for executing expressions (#397)</li>
</ul>
</p>
</blockquote>

<p>Though expressions can be used in any command&rsquo;s input, some &ldquo;space&rdquo; dedicated to them in the pipeline can be useful. Typical cases include variable initialization or <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#create-interactive-scripts-with-input">querying the user</a> for some parameter with the <code>input()</code> function. Several examples shown or linked below make use of this.</p>
<h2 id="block-processors">Block processors</h2>

<blockquote class="extract">
  <p><ul>
<li>
<p>Improved block processors (#395, #397)</p>
<ul>
<li>Simplified and improved the infrastructure underlying block processors for better extensibility.</li>
<li>The <code>begin</code> marker is now optional and implied whenever a block processor command is encountered. <em>Note</em>: the <code>end</code> marker must always be used to mark the end of a block.</li>
<li>Commands inside the block now have access to the current layer structure and its metadata.</li>
</ul>
</li>
</ul>
</p>
</blockquote>

<p>Block processors hardly got any love since the first release of <em>vpype</em> and, as far as I can tell, weren&rsquo;t used much - if at all - due to their limitations. Properties and expressions completely reverse this situation and block processors are now where the magic happens. The changes above lay the ground work for this.</p>

<blockquote class="extract">
  <p><ul>
<li>
<p>Improved the <code>grid</code> block processor (#397)</p>
<ul>
<li>The page size is now updated according to the grid size.</li>
<li>The command now sets expression variables for use in the nested pipeline.</li>
<li>Cells are now first iterated along rows instead of columns.</li>
</ul>
</li>
<li>
<p>The <code>repeat</code> block processor now sets expression variables for use in the nested pipeline (#397)</p>
</li>
<li>
<p>Added <code>forfile</code> block processor to iterate over a list of file (#397)</p>
</li>
<li>
<p>Added <code>forlayer</code> block processor to iterate over the existing layers (#397)</p>
</li>
<li>
<p>The <code>read</code> command now will ignore a missing file if <code>--no-fail</code> parameter is used (#397)</p>
</li>
<li>
<p>Changed the initial default target layer to 1 (#395)</p>
<p>Previously, the first generator command of the pipeline would default to create a new layer if the <code>--layer</code> option was not provided. This could lead to unexpected behaviour in several situation. The target layer is now layer 1. For subsequent generators, the existing behaviour of using the previous generator target layer as default remains.</p>
</li>
</ul>
</p>
</blockquote>

<p>That&rsquo;s two new block processor commands, and another two finally coming to life, plus a few changes to make them work better with real-world workflows.</p>
<p>One of the key changes is that block processors now set temporary expression variables (prefixed with <code>_</code>) that can be used in the nested pipeline. They are listed in each command&rsquo;s help text:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype grid --help
<span style="color:#888">Usage: vpype grid [OPTIONS] NX NY
</span><span style="color:#888"></span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#888">  Creates a NX by NY grid of geometry
</span><span style="color:#888"></span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#888">  [...]
</span><span style="color:#888"></span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#888">  The following variables are set by `grid` and available for expressions:
</span><span style="color:#888"></span><span style="color:#a61717;background-color:#e3d2d2">
</span><span style="color:#a61717;background-color:#e3d2d2"></span><span style="color:#888">      _nx: number of columns (NX)
</span><span style="color:#888">      _ny: number of rows (NY)
</span><span style="color:#888">      _n: total number of cells (NX*NY)
</span><span style="color:#888">      _x: current column (0 to NX-1)
</span><span style="color:#888">      _y: current row (0 to NY-1)
</span><span style="color:#888">      _i: current cell (0 to _n-1)
</span><span style="color:#888">  
</span><span style="color:#888">  [...]
</span></code></pre></div><p>Another novelty is the introduction of two new block processor commands:</p>
<ul>
<li>The <code>forfile</code> command accepts a pathname pattern (e.g. <code>*.svg</code>) and executes the nested pipeline for each of the paths it expends into. It makes things like <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#batch-processing-multiple-svgs-with-forfile">batch processing files</a>, <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#merge-multiple-svgs-into-a-multilayer-file">merging multiple SVGs into a multilayer file</a>, or <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#laying-out-multiple-svgs-on-a-grid">laying out multiple files on a grid</a> a breeze.</li>
<li>The <code>forlayer</code> command executes the nested pipeline for each of the exising layers, which is useful, e.g., to <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#saving-each-layer-as-a-separate-file">export one file per layer</a>.</li>
</ul>
<p>Checks the related <a href="https://vpype.readthedocs.io/en/latest/fundamentals.html#blocks">documentation</a> for more details.</p>
<p>This example, taken from the <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#laying-out-multiple-svgs-on-a-grid">grid layout recipe</a>, demonstrates best what <em>vpype</em> 1.9 is about:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ vpype <span style="color:#d14">\
</span><span style="color:#d14"></span>   <span style="color:#0086b3">eval</span> <span style="color:#d14">&#34;files=glob(&#39;*.svg&#39;)&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>   <span style="color:#0086b3">eval</span> <span style="color:#d14">&#34;cols=6; rows=ceil(len(files)/cols)&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>   <span style="color:#0086b3">eval</span> <span style="color:#d14">&#34;names={};n=100&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>   grid -o 10cm 15cm <span style="color:#d14">&#34;%cols%&#34;</span> <span style="color:#d14">&#34;%rows%&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>       <span style="color:#0086b3">read</span> --no-fail <span style="color:#d14">&#34;%files[_i] if _i &lt; len(files) else &#39;&#39;%&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>       layout -m 0.5cm 10x15cm <span style="color:#d14">\
</span><span style="color:#d14"></span>       forlayer <span style="color:#d14">\
</span><span style="color:#d14"></span>           <span style="color:#0086b3">eval</span> <span style="color:#d14">&#34;%if _name not in names: names[_name] = n; n = n+1%&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>           lmove %_lid% <span style="color:#d14">&#34;%names[_name]%&#34;</span> <span style="color:#d14">\
</span><span style="color:#d14"></span>       end <span style="color:#d14">\
</span><span style="color:#d14"></span>   end <span style="color:#d14">\
</span><span style="color:#d14"></span>   write combined.svg
</code></pre></div><p>It creates a grid layout from multiple SVG files, combining layers using their name (e.g. all &ldquo;yellow&rdquo; layers in input files are merged in a single &ldquo;yellow&rdquo; layer in the output file). Check the <a href="https://vpype.readthedocs.io/en/latest/cookbook.html#laying-out-multiple-svgs-on-a-grid">recipe</a> for a detailed explanation.</p>
<p>This pipeline has it all:</p>
<ul>
<li>extensive use of expressions,</li>
<li>two nested blocks, using their expression variables (prefixed with <code>_</code>),</li>
<li>use of properties (via the <code>_name</code> variable set by <code>forlayer</code>, which contains the current layer&rsquo;s <code>vp_name</code> property).</li>
</ul>
<p>Here is how it looks when run on my <a href="https://github.com/abey79/sketches#machine_typography">Machine Typography</a> #ptpx project:</p>
<img src="/vpype_19/machine_typography.png"width="60%"style="display:block;margin-left:auto;margin-right:auto"/>
<h2 id="other-changes">Other changes</h2>

<blockquote class="extract">
  <p><strong>Note</strong>: This is the last version of <em>vpype</em> to support Python 3.7.</p>
</blockquote>

<p>It&rsquo;s the year of the <a href="https://realpython.com/python-walrus-operator/">walrus</a> for <em>vpype</em>! 🦭</p>

<blockquote class="extract">
  <p><ul>
<li>Added <code>pagerotate</code> command, to rotate the page layout (including geometries) by 90 degrees (#404)</li>
</ul>
</p>
</blockquote>

<p>This command is useful for plotters without native support for both portrait and landscape orientations. Your plotter support only, say, landscape orientation and you want to plot a portrait-oriented file? This pipeline does the trick:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span>vpype <span style="color:#0086b3">read</span> portrait_input.svg pagerotate wrote landscape_output.svg
</code></pre></div>
<blockquote class="extract">
  <p><ul>
<li>Added <code>--keep</code> option to the <code>ldelete</code> command (to delete all layers but those specified) (#383)</li>
</ul>
</p>
</blockquote>

<p>There was formerly no way to delete all layers but one. The new <code>--keep</code> option fills this gap.</p>

<blockquote class="extract">
  <p><ul>
<li>Pinned poetry-core to 1.0.8 to enable editable installs (#410)</li>
</ul>
</p>
</blockquote>

<p><a href="https://python-poetry.org">Poetry</a> finally <a href="https://github.com/python-poetry/poetry/issues/34">supports</a> <a href="https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs">editable installs</a> thanks to <a href="https://www.python.org/dev/peps/pep-0660/">PEP 660</a> 🎉</p>
<p>This change is relevant when developing jointly on <em>vpype</em> and another project that depends on it (e.g. <a href="https://github.com/abey79/vsketch"><em>vsketch</em></a>, or some plug-in). In such cases, <em>vpype</em> can now be installed in editable mode from a local checkout. Modifications made to it will immediately be available to the dependent project:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console"><span style="color:#555">$ </span><span style="color:#0086b3">cd</span> my-plugin
<span style="color:#555">$ </span><span style="color:#0086b3">source</span> venv/bin/activate
<span style="color:#555">$ </span>git clone https://github.com/abey79/vpype ../vpype
<span style="color:#555">$ </span>pip install -e ../vpype
</code></pre></div>
<blockquote class="extract">
  <p><ul>
<li>Fixed an issue with the <code>random</code> command when using non-square area (#395)</li>
</ul>
</p>
</blockquote>

<p>That&rsquo;s a two-year-old bug I can&rsquo;t believe I hadn&rsquo;t seen before 🙄 (I use <code>random</code> <em>a lot</em> when testing out stuff during development.)</p>

<blockquote class="extract">
  <p><ul>
<li>Renamed the bundled config file to <code>vpype_config.toml</code> (#359)</li>
</ul>
</p>
</blockquote>

<p>This is the config file bundled with <em>vpype</em>. It used to be called <code>hpgl_devices.toml</code>, but now it also contains the build-in configurations of the new <code>pens</code> command (<code>cmyk</code> and <code>rgb</code>). The old name didn&rsquo;t make sense anymore.</p>

<blockquote class="extract">
  <p><p>API changes:</p>
<ul>
<li>Moved all CLI-related APIs from <code>vpype</code> to <code>vpype_cli</code> (#388)</li>
<li>Updated the block processor API (breaking change) (#395)</li>
<li>&hellip;</li>
</ul>
</p>
</blockquote>

<p>This release comes with scores of changes at the API level (to many to list here). Two of these changes deserve a note though.</p>
<p>First, a fair amount of infrastructure used by the <em>vpype</em> CLI (e.g. the <code>@generator</code> decorator and friends) used to reside in the <code>vpype</code> package instead of <code>vpype_cli</code>. This is not ideal for many reasons and I&rsquo;m moving away from it. <code>vpype</code> should be a &ldquo;pure&rdquo; library, whereas <code>vpype_cli</code> should contain everything needed for its CLI (and for plug-ins). These are not yet breaking changes but will generate deprecation warnings with most plug-ins. I will ensure that they are fixed ASAP.</p>
<p>Secondly, as part of the block processor overhaul, the <code>@block_processor</code> decorator had breaking changes without backward-compatible deprecation. I am not aware of any third-party code actually using it, so this shouldn&rsquo;t cause any issue.</p>
<h2 id="whats-next">What&rsquo;s next?</h2>
<p>Congrats if you got this far! 😲🏆</p>
<p>I hope you&rsquo;ll enjoy <em>vpype</em> 1.9 as much as I sweated preparing it. 😅</p>
<p>Feedback is welcome, via <a href="https://github.com/abey79/vpype/discussions">discussions</a> for support/suggestions or <a href="https://github.com/abey79/vpype/issues">issues</a> for bugs. As always, I hang out on the <a href="https://drawingbots.net">drawingbots.net</a>&rsquo;s <a href="https://discord.com/invite/XHP3dBg">Discord server</a> and am available for a chat.</p>
<p>Contributions are most welcome too, and the documentation is one area where help is always beneficial. I&rsquo;ve gathered a few ideas of what can be done <a href="https://github.com/abey79/vpype/issues/400">here</a>.</p>
<p>To conclude, here are my probable areas of focus for the coming weeks/months:</p>
<ul>
<li>Given the scope of this release, I&rsquo;m expecting to deal with increased user support and a few kirks and bugs to address. I&rsquo;ll be available for this in the short term.</li>
<li>Property-related stuff must be ported to <a href="https://github.com/abey79/vsketch"><em>vsketch</em></a>, including a nice API to set layer name, color, pen-width, etc.</li>
<li>The next big topic for <em>vpype</em> is its UX. At least, I want to improve the look and usability of the integrated help (using the brand new <a href="https://github.com/ewels/rich-click">rich-click</a> project), and add some visual feedback during execution.</li>
<li>With support for Python 3.7 dropped, compatibility with Python 3.10 is now on the menu.</li>
<li>Whatever user feedback might steer my attention to 😉</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
